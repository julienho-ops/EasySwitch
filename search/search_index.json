{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EasySwitch Documentation","text":"<ul> <li> <p> Get Started</p> <p>Set up EasySwitch and make your first API call in minutes.</p> <p>-&gt; Installation Guide</p> </li> <li> <p> API Reference</p> <p>Complete reference for all available methods and configurations.</p> <p>-&gt; API Documentation</p> </li> <li> <p> Payment Guides</p> <p>Learn how to process mobile money payments across different providers.</p> <p>-&gt; Send Payments | -&gt; Webhooks</p> </li> <li> <p> Contribute</p> <p>Help improve EasySwitch with your contributions and feedback.</p> <p>-&gt; Contribution Guide</p> </li> </ul>"},{"location":"#what-is-easyswitch","title":"What is EasySwitch?","text":"<p>EasySwitch is a unified Python SDK for integrating mobile money APIs across West Africa. It standardizes multiple payment providers behind a single interface while maintaining flexibility and security.</p> <p>Key features:</p> <ul> <li>Unified API for Bizao, PayGate, FedaPay, CinetPay, and more</li> <li>Async-first design for high performance</li> <li>Multi-source configuration (JSON, YAML, environment variables)</li> <li>Enterprise-grade security with webhook validation</li> </ul> <p>Explore further:</p> <ul> <li>GitHub Repository for source code and issues</li> <li>PyPI Package for latest releases</li> <li>Community Forum (coming soon) for support and discussions</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from easyswitch import (\n    EasySwitch, TransactionDetail, Provider,\n    TransactionStatus, Currency, TransactionType,\n    CustomerInfo\n)\n\n# Initialize client\nclient = EasySwitch.from_env()\n\n\n# Creating a Transaction\norder = TransactionDetail(\n    transaction_id = 'xveahdk-82998n9f8uhgj',\n    provider = Provider.CINETPAY,\n    status = TransactionStatus.PENDING, # Default value\n    currency = Currency.XOF,\n    amount = 150,\n    transaction_type = TransactionType.PAYMENT,  # Default value\n    reason = 'My First Transaction Test with EasySwitch\\'s CinetPay client.',\n    reference = 'my_ref',\n    customer = CustomerInfo(\n        phone_number = '+22890000000',\n        first_name = 'Wil',\n        last_name = 'Eins',\n        address = '123 Rue k\u00e9pui, Lom\u00e9', # Optional\n        city = 'Lom\u00e9',  # Optional\n    )\n)\n\n# Send mobile money payment\nresponse = client.send_payment(\n    order\n)\n\nprint(f\"Payment initiated!\")\n</code></pre>"},{"location":"contributing/","title":"\ud83d\ude80 Contributing to EasySwitch","text":"<p>Thank you for your interest in contributing to EasySwitch! This guide will help you contribute effectively while maintaining our quality standards.</p>"},{"location":"contributing/#prerequisites","title":"\ud83d\udd0d Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>UV (recommended) or pip</li> <li>Basic knowledge of payment APIs</li> <li>Familiarity with async testing</li> </ul>"},{"location":"contributing/#local-setup","title":"\ud83d\udcbb Local Setup","text":""},{"location":"contributing/#1-fork-the-repository","title":"1. Fork the Repository","text":"<p>Click \"Fork\" at the top-right of the project's GitHub page.</p>"},{"location":"contributing/#2-clone-the-project","title":"2. Clone the Project","text":"<pre><code>git clone https://github.com/your-username/easyswitch.git\ncd easyswitch\n</code></pre>"},{"location":"contributing/#3-set-up-the-environment","title":"3. Set Up the Environment","text":"<p>With UV (recommended): <pre><code># Install UV\npip install uv\n\n# Create virtual environment\nuv venv\n\n# Activate environment\nsource venv/bin/activate  # Linux/Mac\n# OR\n.\\venv\\Scripts\\activate   # Windows\n\n# Install dependencies\nuv pip install -e .\n</code></pre></p> <p>With standard pip: <pre><code>python -m venv venv\nsource venv/bin/activate\npip install -e .\n</code></pre></p>"},{"location":"contributing/#contribution-workflow","title":"\ud83d\udd04 Contribution Workflow","text":"<ol> <li> <p>Create a Branch <pre><code>git checkout -b feat/new-feature\n</code></pre></p> </li> <li> <p>Implement Your Changes </p> </li> <li>Follow code conventions</li> <li> <p>Add relevant tests</p> </li> <li> <p>Verify Code Quality <pre><code>uv run lint   # Style check\nuv run test   # Run tests\n</code></pre></p> </li> <li> <p>Push Changes <pre><code>git push origin feat/new-feature\n</code></pre></p> </li> <li> <p>Open a Pull Request </p> </li> <li>Complete the PR template</li> <li>Clearly describe your changes</li> <li>Reference related issues</li> </ol>"},{"location":"contributing/#code-conventions","title":"\u2728 Code Conventions","text":""},{"location":"contributing/#general-structure","title":"General Structure","text":"<ul> <li>Typing: Use type annotations everywhere</li> <li>Async: Prefer <code>async/await</code> for I/O operations</li> <li>Exceptions: Use the project's custom exceptions</li> </ul>"},{"location":"contributing/#style-guide","title":"Style Guide","text":"<ul> <li>Naming:</li> <li>Variables/functions: <code>snake_case</code></li> <li>Classes: <code>PascalCase</code></li> <li>Constants: <code>UPPER_CASE</code></li> <li>Docstrings: Follow Google Style   <pre><code>def send_payment(amount: float) -&gt; bool:\n    \"\"\"Sends payment to the aggregator.\n\n    Args:\n        amount: Amount to send (in XOF)\n\n    Returns:\n        bool: True if payment succeeded\n    \"\"\"\n</code></pre></li> </ul>"},{"location":"contributing/#validation","title":"Validation","text":"<ul> <li>Use validators from <code>easyswitch.utils.validators</code></li> <li>Always validate API inputs</li> </ul>"},{"location":"contributing/#testing-quality","title":"\ud83e\uddea Testing &amp; Quality","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code>uv run test  # All tests\nuv run test -k \"test_payment\"  # Specific tests\n</code></pre>"},{"location":"contributing/#code-coverage","title":"Code Coverage","text":"<pre><code>uv run coverage\n</code></pre>"},{"location":"contributing/#best-practices","title":"Best Practices","text":"<ul> <li>1 test per feature</li> <li>Isolated, idempotent tests</li> <li>Mock external APIs</li> </ul>"},{"location":"contributing/#issue-management","title":"\ud83d\udc1b Issue Management","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<ol> <li>Check for existing issues</li> <li>Use the \"Bug Report\" template</li> <li>Include:</li> <li>Environment (Python, OS)</li> <li>Reproduction steps</li> <li>Relevant logs/errors</li> </ol>"},{"location":"contributing/#feature-proposals","title":"Feature Proposals","text":"<ol> <li>Use the \"Feature Request\" template</li> <li>Describe:</li> <li>Use case</li> <li>Expected impact</li> <li>API sketch if applicable</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"\ud83e\udd1d Code of Conduct","text":"<p>We adhere to the Contributor Covenant Code of Conduct. By participating: - Be kind and open-minded - Accept constructive feedback - Prioritize collaboration</p>"},{"location":"contributing/#first-time-contributor","title":"\ud83c\udf89 First-Time Contributor?","text":"<p>Check out these labeled issues: - <code>good first issue</code> for simple contributions - <code>help wanted</code> for more challenging tasks</p> <p>Thank you for helping make EasySwitch even better! \ud83d\udcaa</p>"},{"location":"api-reference/base-adapter/","title":"Base Adapter (<code>easyswitch.adapters.base</code>)","text":"<p>This module provides the foundation of EasySwitch\u2019s adapter system.</p> <ul> <li>An adapter is a small class that knows how to talk to a specific payment provider (aggregator).</li> <li>Each adapter implements the same common interface, so that EasySwitch can interact with any provider in a consistent way.</li> <li>The adapter registry keeps track of all registered providers, so you can dynamically load them at runtime.</li> </ul>"},{"location":"api-reference/base-adapter/#adaptersregistry","title":"\ud83d\udd39 <code>AdaptersRegistry</code>","text":"<p>The registry is the central directory of all adapters. Instead of hardcoding adapter classes, EasySwitch lets you register and retrieve them dynamically.</p> <p>Think of it as a plugin manager:</p> <ul> <li>Developers implement an adapter for a new provider.</li> <li>They register it under a provider name.</li> <li>Later, EasySwitch can fetch it by name and use it.</li> </ul>"},{"location":"api-reference/base-adapter/#methods","title":"Methods","text":""},{"location":"api-reference/base-adapter/#adaptersregistryregistername-optionalstr-none","title":"<code>AdaptersRegistry.register(name: Optional[str] = None)</code>","text":"<p>Decorator used to register an adapter under the given name.</p> <ul> <li>If <code>name</code> is provided \u2192 adapter is registered under that name.</li> <li>If omitted \u2192 EasySwitch will use the adapter class name (<code>SemoaAdapter \u2192 semoa</code>).</li> </ul> <pre><code>@AdaptersRegistry.register(\"semoa\")\nclass SemoaAdapter(BaseAdapter):\n    ...\n</code></pre> <p>This means you can later do:</p> <pre><code>adapter_cls = AdaptersRegistry.get(\"semoa\")\nadapter = adapter_cls(config=my_provider_config)\n</code></pre>"},{"location":"api-reference/base-adapter/#adaptersregistrygetname-str-typebaseadapter","title":"<code>AdaptersRegistry.get(name: str) -&gt; Type[BaseAdapter]</code>","text":"<p>Fetches an adapter by name.</p> <ul> <li>If found \u2192 returns the adapter class (not an instance).</li> <li>If not found \u2192 raises <code>InvalidProviderError</code>.</li> </ul>"},{"location":"api-reference/base-adapter/#adaptersregistryall-listtypebaseadapter","title":"<code>AdaptersRegistry.all() -&gt; List[Type[BaseAdapter]]</code>","text":"<p>Returns a list of all registered adapter classes. Useful for debugging or auto-loading providers.</p>"},{"location":"api-reference/base-adapter/#adaptersregistrylist-liststr","title":"<code>AdaptersRegistry.list() -&gt; List[str]</code>","text":"<p>Returns just the names of all registered adapters.</p> <pre><code>print(AdaptersRegistry.list())\n# [\"semoa\", \"wave\", \"mtn\", ...]\n</code></pre>"},{"location":"api-reference/base-adapter/#adaptersregistryclear-none","title":"<code>AdaptersRegistry.clear() -&gt; None</code>","text":"<p>Removes all registered adapters (used in tests).</p>"},{"location":"api-reference/base-adapter/#baseadapter","title":"\ud83d\udd39 <code>BaseAdapter</code>","text":"<p>The abstract base class for all adapters. Every provider must implement this interface to ensure consistency across EasySwitch.</p> <p>It defines:</p> <ul> <li>\u2705 Common configuration logic (sandbox/production, client setup).</li> <li>\u2705 Utility methods (validation, required fields, formatting).</li> <li>\u2705 Abstract methods that MUST be implemented per provider.</li> </ul>"},{"location":"api-reference/base-adapter/#class-attributes","title":"Class Attributes","text":"<ul> <li><code>REQUIRED_FIELDS: List[str]</code> \u2192 List of required fields (ex: <code>[\"api_key\", \"merchant_id\"]</code>).</li> <li><code>SANDBOX_URL: str</code> \u2192 Provider sandbox base URL.</li> <li><code>PRODUCTION_URL: str</code> \u2192 Provider production base URL.</li> <li><code>SUPPORTED_CURRENCIES: List[Currency]</code> \u2192 Currencies supported by the provider.</li> <li><code>MIN_AMOUNT: Dict[Currency, float]</code> \u2192 Minimum transaction amount per currency.</li> <li><code>MAX_AMOUNT: Dict[Currency, float]</code> \u2192 Maximum transaction amount per currency.</li> <li><code>VERSION: str</code> \u2192 Version of the adapter (default <code>\"1.0.0\"</code>).</li> <li><code>client: Optional[HTTPClient]</code> \u2192 Reusable HTTP client instance.</li> </ul>"},{"location":"api-reference/base-adapter/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, config: ProviderConfig, context: Optional[Dict[str, Any]] = None)\n</code></pre> <ul> <li><code>config</code> \u2192 Holds provider credentials and environment info (sandbox/production).</li> <li><code>context</code> \u2192 Optional dict with extra metadata (e.g., debug flags, request ID, etc.).</li> </ul> <p>This constructor is automatically called when you instantiate an adapter.</p>"},{"location":"api-reference/base-adapter/#utility-methods","title":"Utility Methods","text":""},{"location":"api-reference/base-adapter/#get_client-httpclient","title":"<code>get_client() -&gt; HTTPClient</code>","text":"<ul> <li>Ensures an HTTP client is available.</li> <li>Reuses the same client for performance.</li> </ul>"},{"location":"api-reference/base-adapter/#get_context-dictstr-any","title":"<code>get_context() -&gt; Dict[str, Any]</code>","text":"<ul> <li>Returns extra context passed at instantiation.</li> <li>Useful for logging, tracing, or debugging.</li> </ul>"},{"location":"api-reference/base-adapter/#supports_partial_refund-bool","title":"<code>supports_partial_refund() -&gt; bool</code>","text":"<ul> <li>Returns <code>True</code> if the provider supports partial refunds.</li> <li>Default: <code>False</code>.</li> </ul>"},{"location":"api-reference/base-adapter/#provider_name-str","title":"<code>provider_name() -&gt; str</code>","text":"<ul> <li>Returns a normalized provider name.</li> <li>E.g. <code>SemoaAdapter</code> \u2192 <code>\"semoa\"</code>.</li> </ul>"},{"location":"api-reference/base-adapter/#abstract-methods-must-be-implemented","title":"Abstract Methods (Must Be Implemented)","text":"<p>Every adapter must implement the following methods.</p> Method Purpose Example Use <code>get_headers(authorization=False)</code> Build HTTP headers for requests Add <code>\"Authorization: Bearer &lt;token&gt;\"</code> <code>get_credentials()</code> Return provider credentials Used internally to sign requests <code>send_payment(transaction)</code> Send a new payment request User pays via Semoa/MTN/Wave <code>check_status(transaction_id)</code> Query transaction status Polling until success/failure <code>cancel_transaction(transaction_id)</code> Cancel a pending transaction Not all providers support it <code>get_transaction_detail(transaction_id)</code> Get detailed transaction info Fetch amount, payer, status <code>refund(transaction_id, amount, reason)</code> Process a refund Full or partial refund <code>validate_webhook(payload, headers)</code> Verify incoming webhook signature Prevent spoofed requests <code>parse_webhook(payload, headers)</code> Parse provider webhook \u2192 EasySwitch format Normalize webhook events <code>validate_credentials(credentials)</code> Ensure credentials are valid Check API key correctness <code>format_transaction(data)</code> Convert EasySwitch transaction \u2192 provider format For sending requests <code>get_normalize_status(status)</code> Map provider status \u2192 standardized status <code>\"paid\"</code> \u2192 <code>TransactionStatus.SUCCESS</code>"},{"location":"api-reference/base-adapter/#validation-methods","title":"Validation Methods","text":""},{"location":"api-reference/base-adapter/#get_required_fields-liststr","title":"<code>get_required_fields() -&gt; List[str]</code>","text":"<p>Returns the required config fields for this adapter.</p>"},{"location":"api-reference/base-adapter/#validate_transactiontransaction-transactiondetail-bool","title":"<code>validate_transaction(transaction: TransactionDetail) -&gt; bool</code>","text":"<p>Checks if the transaction is valid:</p> <ul> <li>Amount within min/max range.</li> <li>Currency supported.</li> <li>Phone number format valid.</li> </ul> <p>Raises exception if invalid.</p>"},{"location":"api-reference/base-adapter/#url-resolver","title":"URL Resolver","text":""},{"location":"api-reference/base-adapter/#_get_base_url-str","title":"<code>_get_base_url() -&gt; str</code>","text":"<p>Returns the correct base URL depending on the environment:</p> <ul> <li>Sandbox \u2192 <code>SANDBOX_URL</code>.</li> <li>Production \u2192 <code>PRODUCTION_URL</code>.</li> </ul>"},{"location":"api-reference/base-adapter/#example-implementing-a-custom-adapter","title":"\u2705 Example \u2013 Implementing a Custom Adapter","text":"<pre><code>from easyswitch.adapters.base import BaseAdapter, AdaptersRegistry\nfrom easyswitch.types import PaymentResponse, TransactionDetail, TransactionStatus\n\n@AdaptersRegistry.register(\"semoa\")\nclass SemoaAdapter(BaseAdapter):\n    SANDBOX_URL = \"https://sandbox.semoa.com/api\"\n    PRODUCTION_URL = \"https://api.semoa.com\"\n    SUPPORTED_CURRENCIES = [\"XOF\"]\n\n    def get_headers(self, authorization=False):\n        return {\n            \"Authorization\": f\"Bearer {self.config.api_key}\" if authorization else \"\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_credentials(self):\n        return self.config\n\n    async def send_payment(self, transaction: TransactionDetail) -&gt; PaymentResponse:\n        # TODO: Call Semoa API\n        ...\n\n    async def check_status(self, transaction_id: str) -&gt; TransactionStatus:\n        # TODO: Implement status polling\n        ...\n\n    async def cancel_transaction(self, transaction_id: str) -&gt; bool:\n        return False  # not supported\n\n    async def refund(self, transaction_id: str, amount=None, reason=None) -&gt; PaymentResponse:\n        ...\n\n    async def validate_webhook(self, payload, headers) -&gt; bool:\n        return True\n\n    async def parse_webhook(self, payload, headers) -&gt; dict:\n        return {\"status\": \"parsed\"}\n\n    def validate_credentials(self, credentials) -&gt; bool:\n        return bool(credentials.api_key)\n</code></pre>"},{"location":"api-reference/base-adapter/#developer-checklist-for-writing-a-new-adapter","title":"\ud83d\udcdd Developer Checklist for Writing a New Adapter","text":"<p>Before publishing your adapter, make sure you:</p> <ul> <li>[ ] Define <code>SANDBOX_URL</code> and <code>PRODUCTION_URL</code>.</li> <li>[ ] Set <code>SUPPORTED_CURRENCIES</code>.</li> <li>[ ] Implement <code>send_payment()</code>.</li> <li>[ ] Implement <code>check_status()</code>.</li> <li>[ ] Implement <code>refund()</code> (if supported).</li> <li>[ ] Handle webhooks: <code>validate_webhook()</code> + <code>parse_webhook()</code>.</li> <li>[ ] Normalize provider-specific statuses with <code>get_normalize_status()</code>.</li> <li>[ ] Validate credentials in <code>validate_credentials()</code>.</li> <li>[ ] Add proper headers in <code>get_headers()</code>.</li> </ul>"},{"location":"api-reference/config-types/","title":"Configuration Models (<code>easyswitch.conf.base</code>)","text":"<p>This module defines the configuration system for EasySwitch. It provides base classes, validation logic, and standardized structures to configure providers, logging, and root settings.</p>"},{"location":"api-reference/config-types/#enumerations","title":"\ud83d\udd39 Enumerations","text":""},{"location":"api-reference/config-types/#loglevel","title":"<code>LogLevel</code>","text":"<p>Defines the available logging levels.</p> Value Description <code>debug</code> Detailed debugging logs. <code>info</code> General information logs. <code>warning</code> Warnings that may need attention. <code>error</code> Errors that occurred. <code>critical</code> Critical errors, system failures."},{"location":"api-reference/config-types/#logformat","title":"<code>LogFormat</code>","text":"<p>Defines the available logging output formats.</p> Value Description <code>plain</code> Standard human-readable logs. <code>json</code> Structured logs in JSON format."},{"location":"api-reference/config-types/#models","title":"\ud83d\udd39 Models","text":""},{"location":"api-reference/config-types/#loggingconfig","title":"<code>LoggingConfig</code>","text":"<p>Configuration model for application logging.</p> <pre><code>class LoggingConfig(BaseModel):\n    enabled: bool = False\n    level: LogLevel = LogLevel.INFO\n    file: Optional[str] = None\n    console: bool = True\n    max_size: int = 10  # MB\n    backups: int = 5\n    compress: bool = True\n    format: LogFormat = LogFormat.PLAIN\n    rotate: bool = True\n</code></pre> <p>Fields:</p> <ul> <li><code>enabled</code> \u2013 Enable/disable logging (<code>False</code> by default).</li> <li><code>level</code> \u2013 Log level (<code>LogLevel</code> enum).</li> <li><code>file</code> \u2013 File path for logs (if any).</li> <li><code>console</code> \u2013 Print logs to console.</li> <li><code>max_size</code> \u2013 Maximum file size before rotation (MB).</li> <li><code>backups</code> \u2013 Number of backup log files to keep.</li> <li><code>compress</code> \u2013 Whether to compress rotated logs.</li> <li><code>format</code> \u2013 Log format (<code>plain</code> or <code>json</code>).</li> <li><code>rotate</code> \u2013 Enable log rotation.</li> </ul>"},{"location":"api-reference/config-types/#baseconfigmodel","title":"<code>BaseConfigModel</code>","text":"<p>A base class for all configuration models. Provides extra validation rules via Pydantic.</p> <ul> <li>Forbids extra/undefined fields.</li> <li>Enforces enum values.</li> <li>Validates all fields strictly.</li> </ul>"},{"location":"api-reference/config-types/#providerconfig","title":"<code>ProviderConfig</code>","text":"<p>Defines configuration for a payment provider.</p> <pre><code>class ProviderConfig(BaseConfigModel):\n    api_key: Optional[str] = None\n    api_secret: Optional[str] = None\n    token: Optional[str] = None\n    base_url: Optional[str] = None\n    callback_url: Optional[str] = None\n    return_url: Optional[str] = None\n    timeout: int = 30\n    environment: str = \"sandbox\"   # \"sandbox\" | \"production\"\n    extra: Dict[str, Any] = {}\n</code></pre> <p>Validations:</p> <ul> <li><code>environment</code> must be <code>\"sandbox\"</code> or <code>\"production\"</code>.</li> <li>At least one of <code>api_key</code> or <code>api_secret</code> must be provided.</li> </ul> <p>Fields:</p> <ul> <li><code>api_key</code>, <code>api_secret</code>, <code>token</code> \u2013 Authentication credentials.</li> <li><code>base_url</code> \u2013 Provider API base URL.</li> <li><code>callback_url</code> \u2013 Callback URL for webhooks.</li> <li><code>return_url</code> \u2013 URL to redirect users after a transaction.</li> <li><code>timeout</code> \u2013 API request timeout (seconds).</li> <li><code>environment</code> \u2013 <code>\"sandbox\"</code> or <code>\"production\"</code>.</li> <li><code>extra</code> \u2013 Extra provider-specific settings.</li> </ul>"},{"location":"api-reference/config-types/#rootconfig","title":"<code>RootConfig</code>","text":"<p>The root configuration for EasySwitch.</p> <pre><code>class RootConfig(BaseConfigModel):\n    debug: bool = False\n    logging: LoggingConfig = Field(default_factory=LoggingConfig)\n    default_currency: str = Currency.XOF\n    providers: Dict[Provider, ProviderConfig] = Field(default_factory=dict)\n    default_provider: Optional[Provider] = None\n</code></pre> <p>Fields:</p> <ul> <li><code>debug</code> \u2013 Enable debug mode if <code>True</code>.</li> <li><code>logging</code> \u2013 Logging configuration (<code>LoggingConfig</code>).</li> <li><code>default_currency</code> \u2013 Default currency (<code>Currency</code> enum).</li> <li><code>providers</code> \u2013 Dictionary of enabled providers (<code>ProviderConfig</code> per provider).</li> <li><code>default_provider</code> \u2013 Default provider (must exist in <code>providers</code>).</li> </ul> <p>Validations:</p> <ul> <li> <p><code>default_provider</code> must be:</p> </li> <li> <p>Included in the enabled <code>providers</code>.</p> </li> <li>A valid supported provider (<code>Provider</code> enum).</li> <li><code>default_currency</code> must be a valid value in <code>Currency</code>.</li> </ul>"},{"location":"api-reference/config-types/#baseconfigsource","title":"<code>BaseConfigSource</code>","text":"<p>An abstract base class (interface) for configuration sources. Any custom configuration loader (e.g., from environment, file, database) must implement it.</p> <pre><code>class BaseConfigSource(ABC):\n    @abstractmethod\n    def load(self) -&gt; Dict[str, Any]:\n        \"\"\"Load configurations from the source.\"\"\"\n        pass\n\n    @abstractmethod\n    def is_valid(self) -&gt; bool:\n        \"\"\"Check if the source is valid.\"\"\"\n        pass\n</code></pre>"},{"location":"api-reference/config-types/#example-usage","title":"\u2705 Example Usage","text":"<pre><code>from easyswitch.conf.base import RootConfig, ProviderConfig, LoggingConfig, LogLevel, LogFormat\nfrom easyswitch.types import Provider, Currency\n\nconfig = RootConfig(\n    debug=True,\n    logging=LoggingConfig(\n        enabled=True,\n        level=LogLevel.DEBUG,\n        format=LogFormat.JSON\n    ),\n    default_currency=Currency.XOF,\n    providers={\n        Provider.SEMOA: ProviderConfig(\n            api_key=\"your-api-key\",\n            api_secret=\"your-api-secret\",\n            environment=\"sandbox\"\n        )\n    },\n    default_provider=Provider.SEMOA\n)\n</code></pre>"},{"location":"api-reference/exceptions/","title":"\u26a0\ufe0f Exception Handling in EasySwitch","text":"<p>EasySwitch defines a hierarchy of custom exceptions to provide clear and structured error handling. Instead of catching generic Python exceptions, you can catch specific errors raised by the SDK or providers.</p> <p>This makes it easier to:</p> <ul> <li>Handle provider-specific failures.</li> <li>Distinguish between configuration issues, API failures, and validation errors.</li> <li>Implement robust retry and fallback strategies.</li> </ul>"},{"location":"api-reference/exceptions/#exception-hierarchy","title":"\ud83d\udd39 Exception Hierarchy","text":"<pre><code>Exception\n\u2514\u2500\u2500 EasySwitchError\n    \u251c\u2500\u2500 ConfigurationError\n    \u251c\u2500\u2500 AuthenticationError\n    \u251c\u2500\u2500 InvalidRequestError\n    \u251c\u2500\u2500 ValidationError\n    \u251c\u2500\u2500 NetworkError\n    \u251c\u2500\u2500 InvalidProviderError\n    \u251c\u2500\u2500 TransactionNotFoundError\n    \u251c\u2500\u2500 WebhookValidationError\n    \u251c\u2500\u2500 UnsupportedOperationError\n    \u251c\u2500\u2500 APIError\n    \u2502   \u251c\u2500\u2500 RateLimitError\n    \u2502   \u251c\u2500\u2500 PaymentError\n    \u2502   \u251c\u2500\u2500 WebhookError\n    \u2502   \u251c\u2500\u2500 CustomerError\n    \u2502   \u251c\u2500\u2500 CurrencyError\n    \u2502   \u251c\u2500\u2500 RefundError\n    \u2502   \u251c\u2500\u2500 CancellationError\n    \u2502   \u251c\u2500\u2500 BalanceError\n    \u2502   \u2514\u2500\u2500 LogError\n</code></pre>"},{"location":"api-reference/exceptions/#easyswitcherror","title":"\ud83d\udd39 <code>EasySwitchError</code>","text":"<p>The base exception for the SDK. All other errors inherit from this class.</p> <pre><code>class EasySwitchError(Exception):\n    def __init__(self, message: str, code: Optional[str] = None, details: Optional[Dict[str, Any]] = None):\n        self.message = message\n        self.code = code\n        self.details = details or {}\n</code></pre> <p>\u2705 Attributes:</p> <ul> <li><code>message</code> \u2192 Human-readable description of the error.</li> <li><code>code</code> \u2192 Short identifier for the error (optional).</li> <li><code>details</code> \u2192 Dict with structured information about the error.</li> </ul>"},{"location":"api-reference/exceptions/#configuration-authentication-errors","title":"\ud83d\udd39 Configuration &amp; Authentication Errors","text":"<ul> <li> <p><code>ConfigurationError</code> \u2192 Misconfigured SDK or provider settings.</p> </li> <li> <p>Example: Missing API key or wrong environment value.</p> </li> <li> <p><code>AuthenticationError</code> \u2192 Failed authentication with the provider.</p> </li> <li> <p>Example: Invalid API key/secret.</p> </li> <li> <p><code>InvalidRequestError</code> \u2192 Request built incorrectly before being sent.</p> </li> <li> <p>Example: Missing required parameters.</p> </li> <li> <p><code>ValidationError</code> \u2192 A specific request field is invalid.</p> </li> <li> <p>Extra field: <code>field</code> \u2192 name of the invalid field.</p> </li> </ul> <pre><code>try:\n    client = EasySwitchClient(config={})\nexcept ConfigurationError as e:\n    print(f\"Invalid configuration: {e.message}\")\n</code></pre>"},{"location":"api-reference/exceptions/#api-errors","title":"\ud83d\udd39 API Errors","text":"<p><code>APIError</code> is the base class for provider-related failures. It contains extra metadata to help debugging:</p> <p>\u2705 Attributes:</p> <ul> <li><code>status_code</code> \u2192 HTTP status code (if available).</li> <li><code>provider</code> \u2192 Provider name (e.g. <code>\"mtn\"</code>, <code>\"wave\"</code>).</li> <li><code>raw_response</code> \u2192 Full API response from provider.</li> </ul> <p>Subclasses of <code>APIError</code>:</p> <ul> <li><code>RateLimitError</code> \u2192 Too many requests sent in a short time.</li> <li><code>PaymentError</code> \u2192 Error during payment processing.</li> <li><code>RefundError</code> \u2192 Refund request failed.</li> <li><code>CancellationError</code> \u2192 Transaction cancellation failed.</li> <li><code>WebhookError</code> \u2192 Error while processing a webhook.</li> <li><code>CustomerError</code> \u2192 Customer creation/management failure.</li> <li><code>CurrencyError</code> \u2192 Unsupported or invalid currency.</li> <li><code>BalanceError</code> \u2192 Balance retrieval failed.</li> <li><code>LogError</code> \u2192 Error related to logging or audit logs.</li> </ul> <pre><code>try:\n    payment = client.send_payment(transaction)\nexcept PaymentError as e:\n    print(f\"Payment failed: {e.details.get('raw_response')}\")\n</code></pre>"},{"location":"api-reference/exceptions/#network-provider-errors","title":"\ud83d\udd39 Network &amp; Provider Errors","text":"<ul> <li><code>NetworkError</code> \u2192 Communication failure (timeout, DNS issue).</li> <li><code>InvalidProviderError</code> \u2192 The requested provider is not supported or not registered.</li> <li><code>TransactionNotFoundError</code> \u2192 Transaction ID does not exist in provider records.</li> <li><code>WebhookValidationError</code> \u2192 Invalid or spoofed webhook payload.</li> <li><code>UnsupportedOperationError</code> \u2192 The provider does not support a requested operation (e.g., cancellation not available).</li> </ul> <pre><code>try:\n    status = client.check_status(\"invalid_id\")\nexcept TransactionNotFoundError:\n    print(\"Transaction does not exist\")\n</code></pre>"},{"location":"api-reference/exceptions/#example-global-error-handling","title":"\ud83d\udd39 Example \u2013 Global Error Handling","text":"<pre><code>from easyswitch.exceptions import *\n\ntry:\n    client.send_payment(transaction)\n\nexcept ConfigurationError as e:\n    print(f\"Bad SDK configuration: {e.details}\")\n\nexcept AuthenticationError:\n    print(\"Authentication failed with provider\")\n\nexcept RateLimitError:\n    print(\"Too many requests, please retry later\")\n\nexcept PaymentError as e:\n    print(f\"Payment failed: {e.message}, response: {e.details.get('raw_response')}\")\n\nexcept EasySwitchError as e:\n    print(f\"Unexpected EasySwitch error: {e.message}\")\n\nexcept Exception as e:\n    print(f\"Unexpected Python error: {str(e)}\")\n</code></pre>"},{"location":"api-reference/exceptions/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Always catch specific exceptions when possible (e.g., <code>PaymentError</code>).</li> <li>Use <code>EasySwitchError</code> as a generic fallback.</li> <li>Log <code>details</code> for debugging (contains raw provider response).</li> <li>In production, map exceptions to user-friendly messages (e.g., <code>\"Your payment could not be processed, please try again\"</code>).</li> </ul>"},{"location":"api-reference/shared-types/","title":"\ud83d\udcd6 Shared Types","text":"<p>The <code>easyswitch.types</code> module defines shared enums, dataclasses, and structures used across the EasySwitch SDK. These ensure that all providers, responses, and events follow a consistent format.</p>"},{"location":"api-reference/shared-types/#providers","title":"\ud83c\udfe6 Providers","text":"<pre><code>class Provider(str, Enum)\n</code></pre> <p>Represents the list of supported payment aggregators.</p> Member Value Description <code>SEMOA</code> <code>\"SEMOA\"</code> Semoa aggregator. <code>BIZAO</code> <code>\"BIZAO\"</code> Bizao aggregator. <code>CINETPAY</code> <code>\"CINETPAY\"</code> CinetPay aggregator. <code>PAYGATE</code> <code>\"PAYGATE\"</code> PayGate aggregator. <code>FEDAPAY</code> <code>\"FEDAPAY\"</code> FedaPay aggregator. <p>\u2705 Used whenever you need to specify or identify the payment provider.</p>"},{"location":"api-reference/shared-types/#currency","title":"\ud83d\udcb1 Currency","text":"<pre><code>class Currency(str, Enum)\n</code></pre> <p>Represents the supported currencies.</p> Member Value Description <code>XOF</code> <code>\"XOF\"</code> CFA Franc BCEAO (West Africa). <code>XAF</code> <code>\"XAF\"</code> CFA Franc BEAC (Central Africa). <code>NGN</code> <code>\"NGN\"</code> Nigerian Naira. <code>GHS</code> <code>\"GHS\"</code> Ghanaian Cedi. <code>EUR</code> <code>\"EUR\"</code> Euro. <code>USD</code> <code>\"USD\"</code> US Dollar. <code>CDF</code> <code>\"CDF\"</code> Congolese Franc. <code>GNF</code> <code>\"GNF\"</code> Guinean Franc. <code>KMF</code> <code>\"KMF\"</code> Comorian Franc."},{"location":"api-reference/shared-types/#countries","title":"\ud83c\udf0d Countries","text":"<pre><code>class Countries(str, Enum)\n</code></pre> <p>Represents the supported countries.</p> Member Value Description <code>TOGO</code> <code>\"TG\"</code> Togo <code>BENIN</code> <code>\"BJ\"</code> Benin <code>GHANA</code> <code>\"GH\"</code> Ghana <code>BURKINA</code> <code>\"BF\"</code> Burkina Faso <code>IVORY_COAST</code> <code>\"CI\"</code> C\u00f4te d\u2019Ivoire"},{"location":"api-reference/shared-types/#transaction-types","title":"\ud83d\udd04 Transaction Types","text":"<pre><code>class TransactionType(str, Enum)\n</code></pre> <p>Represents the operation type of a transaction.</p> Member Value Description <code>PAYMENT</code> <code>\"payment\"</code> Standard payment (customer \u2192 merchant). <code>DEPOSIT</code> <code>\"deposit\"</code> Deposit into a wallet/account. <code>WITHDRAWAL</code> <code>\"withdrawal\"</code> Withdraw from a wallet/account. <code>REFUND</code> <code>\"refund\"</code> Refund of a previous transaction. <code>TRANSFER</code> <code>\"transfer\"</code> Transfer between accounts."},{"location":"api-reference/shared-types/#transaction-status","title":"\ud83d\udcca Transaction Status","text":"<pre><code>class TransactionStatus(str, Enum)\n</code></pre> <p>Possible states of a transaction.</p> Member Value Meaning <code>PENDING</code> <code>\"pending\"</code> Waiting to be processed. <code>SUCCESSFUL</code> <code>\"successful\"</code> Completed successfully. <code>FAILED</code> <code>\"failed\"</code> Failed permanently. <code>ERROR</code> <code>\"error\"</code> Technical error. <code>CANCELLED</code> <code>\"cancelled\"</code> Cancelled by user/system. <code>REFUSED</code> <code>\"refused\"</code> Refused by provider. <code>DECLINED</code> <code>\"declined\"</code> Declined (e.g. insufficient funds). <code>EXPIRED</code> <code>\"expired\"</code> Payment expired. <code>REFUNDED</code> <code>\"refunded\"</code> Transaction refunded. <code>PROCESSING</code> <code>\"processing\"</code> In progress. <code>INITIATED</code> <code>\"initiated\"</code> Initiated but not yet processed. <code>UNKNOWN</code> <code>\"unknown\"</code> Unknown state. <code>COMPLETED</code> <code>\"completed\"</code> Fully completed. <code>TRANSFERRED</code> <code>\"transferred\"</code> Successfully transferred."},{"location":"api-reference/shared-types/#data-structures","title":"\ud83d\udce6 Data Structures","text":""},{"location":"api-reference/shared-types/#transactionstatusresponse","title":"\ud83d\udd0e <code>TransactionStatusResponse</code>","text":"<pre><code>@dataclass\nclass TransactionStatusResponse:\n    transaction_id: str\n    provider: Provider\n    status: TransactionStatus\n    amount: float\n    data: Dict[str, Any]\n</code></pre> <p>Represents a standardized status response from a provider.</p>"},{"location":"api-reference/shared-types/#customerinfo","title":"\ud83d\udc64 <code>CustomerInfo</code>","text":"<pre><code>@dataclass\nclass CustomerInfo:\n    phone_number: str\n    first_name: Optional[str]\n    last_name: Optional[str]\n    email: Optional[str]\n    ...\n</code></pre> <p>Represents customer details attached to a transaction.</p> <p>Useful for receipts, fraud detection, and refunds.</p>"},{"location":"api-reference/shared-types/#paymentresponse","title":"\ud83d\udcb3 <code>PaymentResponse</code>","text":"<pre><code>@dataclass\nclass PaymentResponse:\n    transaction_id: str\n    provider: Provider\n    status: TransactionStatus\n    amount: float\n    currency: Currency\n    ...\n</code></pre> <p>Standardized structure returned after a payment request.</p>"},{"location":"api-reference/shared-types/#properties","title":"Properties:","text":"<ul> <li><code>is_successful</code> \u2192 <code>True</code> if status is <code>SUCCESSFUL</code></li> <li><code>is_pending</code> \u2192 <code>True</code> if status is <code>PENDING</code>, <code>PROCESSING</code>, or <code>INITIATED</code></li> <li><code>is_failed</code> \u2192 <code>True</code> if status is <code>FAILED</code>, <code>CANCELLED</code>, or <code>EXPIRED</code></li> </ul>"},{"location":"api-reference/shared-types/#transactiondetail","title":"\ud83d\udcd1 <code>TransactionDetail</code>","text":"<pre><code>@dataclass\nclass TransactionDetail:\n    transaction_id: str\n    provider: Provider\n    amount: float\n    currency: Currency\n    status: TransactionStatus\n    transaction_type: TransactionType\n    ...\n</code></pre> <p>Represents a complete record of a transaction, including metadata, customer info, and timestamps.</p>"},{"location":"api-reference/shared-types/#webhookevent","title":"\ud83d\udce1 <code>WebhookEvent</code>","text":"<pre><code>@dataclass\nclass WebhookEvent:\n    event_type: str\n    provider: Provider\n    transaction_id: str\n    status: TransactionStatus\n    amount: float\n    currency: Currency\n    ...\n</code></pre> <p>Represents a standardized webhook notification event.</p>"},{"location":"api-reference/shared-types/#apicredentials","title":"\ud83d\udd11 <code>ApiCredentials</code>","text":"<pre><code>@dataclass\nclass ApiCredentials:\n    api_key: str\n    api_secret: Optional[str]\n    client_id: Optional[str]\n    ...\n</code></pre> <p>Represents authentication credentials for a provider.</p>"},{"location":"api-reference/shared-types/#utility-methods","title":"Utility methods:","text":"<ul> <li><code>load_from_env(provider: Provider)</code> \u2192 Loads credentials from environment variables prefixed with <code>EASYSWITCH_&lt;PROVIDER&gt;_</code>.</li> <li><code>write_to_env(provider: Provider)</code> \u2192 Saves credentials to environment variables.</li> </ul> <p>\u2705 Example:</p> <pre><code>export EASYSWITCH_CINETPAY_API_KEY=\"pk_test_123\"\nexport EASYSWITCH_CINETPAY_API_SECRET=\"sk_test_123\"\n</code></pre> <pre><code>creds = ApiCredentials(api_key=\"\")\ncreds.load_from_env(Provider.CINETPAY)\nprint(creds.api_key)  # =&gt; pk_test_123\n</code></pre>"},{"location":"api-reference/shared-types/#paginationmeta","title":"\ud83d\udcd6 <code>PaginationMeta</code>","text":"<pre><code>@dataclass\nclass PaginationMeta:\n    current_page: int\n    next_page: Optional[int]\n    prev_page: Optional[int]\n    per_page: int\n    total_pages: int\n    total_count: int\n</code></pre> <p>Standardized structure used when listing or paginating transactions.</p>"},{"location":"api-reference/shared-types/#summary","title":"\u2705 Summary","text":"<p>The <code>easyswitch.types</code> module provides:</p> <ul> <li>Unified enums for providers, currencies, statuses, and transaction types.</li> <li>Standardized dataclasses for transactions, customers, payments, webhooks, and pagination.</li> <li>A common API credentials system with built-in env helpers.</li> </ul> <p>These types ensure all providers work seamlessly and consistently under the EasySwitch SDK.</p>"},{"location":"assets/old_pages/index_/","title":"Welcome to EasySwitch Documentation!","text":"<p>Simplify transactions, master configurations, switch easily.</p> <p>EasySwitch is a unified Python SDK for Mobile Money integration across major aggregators in West Africa. It provides a single, consistent interface to simplify payment processing, reduce code duplication, and accelerate development.</p> <ul> <li> <p> English</p> <p>Contiue reading EasySwitch documentation in English.</p> <p>-&gt; Get started</p> </li> <li> <p> Fran\u00e7ais</p> <p>Lire la documentation de EasySwitch en Fran\u00e7ais</p> <p>-&gt; Commencer</p> </li> </ul>"},{"location":"assets/old_pages/index_/#what-is-atlasos","title":"What is AtlasOS?","text":"<p>AtlasOS, or Atlas, is an open-source project that enhances Windows by conveniently applying privacy, usability, and performance optimizations, all while maintaining functionality and customizability.</p> <p>If you'd like to learn more, see our:</p> <ul> <li>GitHub repository README for more in-depth overviews</li> <li>GitHub repository's source code for what Atlas does under the hood</li> <li>Discord server to connect with the Atlas community and get support</li> <li>Website for a general overview of Atlas</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>EasySwitch uses a centralized configuration object to provide a flexible, type-safe, and validated configuration system that lets you control the behavior of the SDK: environment setup, payment providers, logging, and more.</p>"},{"location":"getting-started/configuration/#overview","title":"\ud83d\udd01 Overview","text":"<p>The main configuration object is RootConfig. You can load it from a file, environment variable, or any custom source via a class that extends BaseConfigSource.</p>"},{"location":"getting-started/configuration/#rootconfig","title":"\ud83d\udce6 <code>RootConfig</code>","text":"<p>The central configuration class. It defines all the required settings to run EasySwitch.</p>"},{"location":"getting-started/configuration/#attributes","title":"Attributes:","text":"Attribute Type Description <code>debug</code> <code>bool</code> Enables debug mode (more verbose logging). <code>logging</code> <code>LoggingConfig</code> Logging configuration. <code>default_currency</code> <code>str</code> Default currency for transactions (must be in the <code>Currency</code> enum). <code>providers</code> <code>Dict[Provider, ProviderConfig]</code> Dictionary of enabled payment providers. <code>default_provider</code> `Provider None` Default provider used if none is explicitly specified."},{"location":"getting-started/configuration/#providerconfig","title":"\ud83d\udd27 <code>ProviderConfig</code>","text":"<p>Represents configuration for each individual payment provider.</p>"},{"location":"getting-started/configuration/#attributes_1","title":"Attributes:","text":"Attribute Type Description <code>api_key</code> `str None` Public key or client ID. <code>api_secret</code> `str None` Private key or client secret. <code>token</code> `str None` Access token (used by some providers). <code>base_url</code> `str None` API base URL for the provider. <code>callback_url</code> `str None` URL to receive provider notifications. <code>return_url</code> `str None` URL to redirect after payment. <code>timeout</code> <code>int</code> Maximum duration of a request (in seconds). <code>environment</code> `\"sandbox\" \"production\"` Environment in which the provider should run. <code>extra</code> <code>Dict[str, Any]</code> Additional data specific to the provider."},{"location":"getting-started/configuration/#validation","title":"Validation:","text":"<ul> <li>Either <code>api_key</code> or <code>api_secret</code> must be provided.</li> <li><code>environment</code> must be either <code>\"sandbox\"</code> or <code>\"production\"</code>.</li> </ul>"},{"location":"getting-started/configuration/#loggingconfig","title":"\ud83e\uddfe <code>LoggingConfig</code>","text":"<p>Handles all SDK logging options.</p> Attribute Type Description <code>enabled</code> <code>bool</code> Enable or disable logging. <code>level</code> <code>LogLevel</code> (<code>debug</code>, <code>info</code>, etc.) Logging verbosity level. <code>file</code> `str None` File to write logs to. <code>console</code> <code>bool</code> Enable console output for logs. <code>max_size</code> <code>int</code> Max log file size (in MB). <code>backups</code> <code>int</code> Number of backup log files to keep. <code>compress</code> <code>bool</code> Whether to compress old logs. <code>format</code> <code>LogFormat</code> (<code>plain</code>, <code>json</code>) Log output format. <code>rotate</code> <code>bool</code> Enable automatic log file rotation."},{"location":"getting-started/configuration/#built-in-validation","title":"\ud83d\udd12 Built-in Validation","text":"<p>The SDK uses Pydantic to ensure strict validation of all configuration fields. If something is misconfigured, a <code>ConfigurationError</code> is raised.</p>"},{"location":"getting-started/configuration/#validation-examples","title":"Validation Examples:","text":"<pre><code># Invalid currency\ndefault_currency = \"USD\"  # Error: USD is not defined in Currency enum\n\n# Invalid default provider\ndefault_provider = \"STRIPE\"  # Error if STRIPE is not present in the `providers` dictionary\n</code></pre>"},{"location":"getting-started/configuration/#1-supported-configuration-sources","title":"1. \u2699\ufe0f Supported Configuration sources","text":"Source Description Example Environment Variables Load configs from a <code>.env</code> file or System Environment see example Native Python Dictionary Direct configuration in your code see exemple JSON File Load configs from a JSON file see example YAML File Load configs from a YAML file see example"},{"location":"getting-started/configuration/#example-of-env-file","title":"\ud83d\udd39 Example of <code>.env</code> file","text":"<pre><code># This file is a sample. Copy it to .env and fill in the values.\n\n# General configuration\nEASYSWITCH_ENVIRONMENT=sandbox                  # or production\nEASYSWITCH_TIMEOUT=30                           # seconds\nEASYSWITCH_DEBUG=true                           # Enable debug mode\n\n# Logging configuration\n# Note: Logging configuration is only used if EASYSWITCH_LOGGING is set to true\n\nEASYSWITCH_LOGGING=true                         # Enable file logging\nEASYSWITCH_LOG_LEVEL=info                       # debug, info, warning, error\nEASYSWITCH_LOG_FILE=/var/log/easyswitch.log     # Path to the log file\nEASYSWITCH_CONSOLE_LOGGING=true                 # Enable console logging\nEASYSWITCH_LOG_MAX_SIZE=10                      # Maximum size of the log file in MB\nEASYSWITCH_LOG_BACKUPS=5                        # Number of backup log files to keep\nEASYSWITCH_LOG_COMPRESS=true                    # Whether to compress old log files\nEASYSWITCH_LOG_FORMAT=plain                     # Format of the log file (plain or json)\nEASYSWITCH_LOG_ROTATE=true                      # Whether to rotate the log file\n\n# Payment gateway configuration\nEASYSWITCH_ENABLED_PROVIDERS=cinetpay,semoa     # Comma-separated list of enabled payment providers\nEASYSWITCH_DEFAULT_PROVIDER=cinetpay            # Default payment provider\nEASYSWITCH_CURRENCY=XOF                         # Default currency\n\n# Providers configuration\n# NOTE: these are standadized variables for all providers. \n\n# CINETPAY\n# Note: Only required if EASYSWITCH_ENABLED_PROVIDERS includes 'cinetpay'\n# You don't need to fill in all of these variables. Only fill in the ones you need.\nEASYSWITCH_CINETPAY_API_KEY=your_cinetpay_api_key\nEASYSWITCH_CINETPAY_X_SECRET=your_cinetpay_secret_key\nEASYSWITCH_CINETPAY_X_STIE_ID=your_cinetpay_site_id\nEASYSWITCH_CINETPAY_CALLBACK_URL=your_cinetpay_callback_url\nEASYSWITCH_CINETPAY_X_CHANNELS=ALL\nEASYSWITCH_CINETPAY_X_LANG=fr\n\n# SEMOA\n# Note: Only required if EASYSWITCH_ENABLED_PROVIDERS includes 'semoa'\n# You don't need to fill in all of these variables. Only fill in the ones you need.\nEASYSWITCH_SEMOA_API_KEY=your_semoa_api_key\nEASYSWITCH_SEMOA_X_CLIENT_ID=your_semoa_client_id\nEASYSWITCH_SEMOA_X_CLIENT_SECRET=your_semoa_client_secret\nEASYSWITCH_SEMOA_X_USERNAME=your_semoa_username\nEASYSWITCH_SEMOA_X_PASSWORD=your_semoa_password\nEASYSWITCH_SEMOA_X_CALLBACK_URL=your_semoa_callback_url   # Optional\n</code></pre>"},{"location":"getting-started/configuration/#example-of-python-dictionary","title":"\ud83d\udd39 Example of python dictionary","text":"<pre><code>from easyswitch import (\n    EasySwitch, TransactionDetail, Provider,\n    TransactionStatus, Currency, TransactionType,\n    CustomerInfo\n)\n\nconfig = {\n    \"debug\": True,\n    \"providers\": {\n        Provider.CINETPAY: {\n            \"api_key\": \"your_api_key\",\n            \"base_url\": \"https://api.exemple.com/v1\", # Optional\n            \"callback_url\": \"https://api.exemple.com/v1/callback\",\n            \"return_url\": \"https://api.exemple.com/v1/return\",\n            \"environment\": \"production\",     # Optional sandbox by default\n            \"extra\": {\n                \"secret\": \"your_secret\",\n                \"site_id\": \"your_site_id\",\n                \"channels\": \"ALL\",     # More details on Cinetpay's documentation.\n                \"lang\": \"fr\"        # More details on Cinetpay's documentation.\n            }\n        },\n        Provider.BIZAO: {\n            \"api_key\": \"your_api_key\",\n            \"base_url\": \"https://api.exemple.com/v1\", # Optional\n            \"callback_url\": \"https://api.exemple.com/v1/callback\",\n            \"return_url\": \"https://api.exemple.com/v1/return\",\n            \"environment\": \"production\",     # Optional sandbox by default\n            \"timeout\":30,\n            \"extra\": {\n                # Dev Configs\n                \"dev_client_id\": \"your_dev_client_id\",\n                \"dev_client_secret\": \"your_dev_client_secret\",\n                \"dev_token_url\": \"https://your_dev_token_url.com\",     \n\n                # Prod Configs\n                \"prod_client_id\": \"your_prod_client_id\",\n                \"prod_client_secret\": \"your_prod_client_secret\",\n                \"prod_token_url\": \"https://your_dev_token_url.com\",\n\n                # Global configs\n                \"country-code\": Countries.IVORY_COAST,\n                \"mno-name\": \"orange\",\n                \"channel\": \"web\",\n                \"lang\": \"fr\",\n                \"cancel_url\": \"https/example.com/cancel\"\n            }\n        },\n    }\n}\n\nclient = EasySwitch.from_dict(config)\n</code></pre>"},{"location":"getting-started/configuration/#configuration-from-json-file","title":"\ud83d\udd39 Configuration from JSON file","text":"<pre><code>// config.json\n{\n  \"debug\": true,\n  \"default_currency\": \"XOF\",\n  \"default_provider\": \"CINETPAY\",\n  \"logging\": {\n    \"enabled\": true,\n    \"level\": \"info\",\n    \"file\": \"logs/easyswitch.log\",\n    \"console\": true,\n    \"rotate\": true,\n    \"compress\": true,\n    \"format\": \"plain\"\n  },\n  \"providers\": {\n    \"CINETPAY\": {\n      \"api_key\": \"your_cinetpay_api_key\",\n      \"base_url\": \"https://sandbox.example.com/api\",\n      \"callback_url\": \"https://example.com/callback\",\n      \"environment\": \"sandbox\",\n      \"extra\": {\n        \"secret\": \"your_cinetpay_secret_key\",\n        \"site_id\": \"your_cinetpay_site_id\",\n        \"channels\": \"ALL\",\n        \"lang\": \"fr\"\n      }\n    },\n    \"SEMOA\": {\n      \"api_key\": \"your_semoa_api_key\",\n      \"base_url\": \"https://api.stripe.com\",\n      \"environment\": \"production\",\n      \"extra\": {\n        \"client_id\": \"your_semoa_client_id\",\n        \"client_secret\": \"your_semoa_client_secret\",\n        \"username\": \"your_semoa_username\",\n        \"password\": \"your_semoa_password\"\n      }\n    }\n  }\n}\n</code></pre> <pre><code>client = EasySwitch.from_json(\"config.json\")\n</code></pre>"},{"location":"getting-started/configuration/#configuration-from-yaml-file","title":"\ud83d\udd39 Configuration from YAML file","text":"<pre><code>debug: true\ndefault_currency: XOF\ndefault_provider: CINETPAY\n\nlogging:\n    enabled: true\n    level: info\n    file: logs/easyswitch.log\n    console: true\n    rotate: true\n    compress: true\n    format: plain\n\n# Configure Providers\nproviders:\n    # CinetPay Configs\n    CINETPAY:\n        api_key: your_cinetpay_api_key\n        base_url: https://sandbox.example.com/api\n        callback_url: https://example.com/callback\n        environment: sandbox\n        extra:\n            secret: your_cinetpay_secret_key\n            site_id: your_cinetpay_site_id\n            channels: ALL\n            lang: fr\n\n    # Semoa Configs\n    SEMOA:\n        api_key: your_semoa_api_key\n        base_url: https://api.stripe.com\n        environment: production\n        extra:\n            client_id: your_semoa_client_id\n            client_secret: your_semoa_client_secret\n            username: your_semoa_username\n            password: your_semoa_password\n</code></pre> <pre><code>client = EasySwitch.from_yaml(\"config.yaml\")\n</code></pre>"},{"location":"getting-started/configuration/#creating-new-configuration-source","title":"Creating new configuration source","text":""},{"location":"getting-started/configuration/#baseconfigsource","title":"\ud83d\udd0c <code>BaseConfigSource</code>","text":"<p>Abstract base class used to implement custom configuration sources, such as files, environment variables, remote services, etc.</p> <pre><code>from easyswitch.conf import register_source\n\n# Use @register_source decorator to regiter \n# your config source loader class\n@register_source('toml')\nclass MyTomlConfigSource(BaseConfigSource):\n    def __init__(self, path: str):\n        self.path = path\n\n    def is_valid(self) -&gt; bool:\n        return Path(self.path).exists()\n\n    def load(self) -&gt; Dict[str, Any]:\n        with open(self.path, 'r') as f:\n            return toml.safe_load(f)\n</code></pre>"},{"location":"getting-started/configuration/#usage-example","title":"\ud83e\uddea Usage Example","text":"<pre><code>from easyswitch.conf import CommandManager\nfrom my_source import MyTomlConfigSource\nfrom easyswitch import EasySwwitch\n\n# Create config manager using MyTomlConfigSource tag 'toml'\nmanager = CommandManager.add_source(\n    'toml',                 # Which references MyTomlConfigSource class\n    path = \"config.toml\"    # .toml file path\n).load()\n\n# Use it to configure client\nclient = EasySwitch(config = manager.get_config())\n...\n</code></pre>"},{"location":"getting-started/configuration/#summary","title":"\u2705 Summary","text":"<p>The EasySwitch configuration system is:</p> <ul> <li>\u2705 Strongly typed</li> <li>\u2705 Automatically validated</li> <li>\u2705 Flexible and extensible</li> <li>\u2705 Safe and secure</li> </ul> <p>It gives you full control over how payment providers are integrated and managed in your applications.</p> <p>For more details on how to use the <code>RootConfig</code> object with other parts of the SDK, check the API Reference.</p>"},{"location":"getting-started/installation/","title":"Install EasySwitch","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li> Python &gt;=3.9</li> <li> Package manager (<code>pip</code> or <code>uv</code> recommanded)</li> <li> API credentials for any supported payment provider (PayGate, FedaPay, etc.)</li> </ul>"},{"location":"getting-started/installation/#install","title":"Install","text":"Using pip (standard) <pre><code>pip install easyswitch\n</code></pre> Using UV (ultra-fast) <pre><code># First install UV\npip install uv\n\n# Then install EasySwitch\nuv pip install easyswitch\n\n# Or \nuv add easyswitch\n</code></pre> Install from sources <pre><code>git clone https://github.com/your-repo/easyswitch.git\ncd easyswitch\npip install -e .[dev]  # Development mode\n</code></pre>"},{"location":"getting-started/installation/#check-installation","title":"Check installation","text":"<pre><code>import easyswitch\nprint(easyswitch.__version__)\n# Example output: '1.0.0'\n</code></pre>"},{"location":"integrations/bizao/","title":"Under development","text":""},{"location":"integrations/cinetpay/","title":"Under development","text":""},{"location":"integrations/fedapay/","title":"FedaPay Integration with EasySwitch","text":""},{"location":"integrations/fedapay/#overview","title":"Overview","text":"<p>FedaPay is an innovative online payment platform designed to meet the needs of freelancers, businesses, e-commerce platforms, non-governmental organizations (NGOs), and government structures. With its intuitive interface and rapid integration capabilities, FedaPay not only facilitates online payment acceptance but also enables deposits to users' Mobile Money accounts. The platform ensures efficient and secure transaction management with smooth financial flow tracking, making payment and deposit operations simple and reliable.</p>"},{"location":"integrations/fedapay/#prerequisites","title":"Prerequisites","text":"<p>Before integrating FedaPay with EasySwitch, ensure you have:</p> <ul> <li>EasySwitch library is installed. For setup instructions, see Installation.</li> <li>A FedaPay account (create one at fedapay.com)</li> <li>API keys (test and live) from your FedaPay dashboard</li> </ul>"},{"location":"integrations/fedapay/#supported-countries","title":"Supported Countries","text":"<p>FedaPay supports the following countries and payment methods:</p> Country Mobile Money Operators Card Payments Benin MTN, Moov, Celtiis, BMO, Coris Money \u2705 Togo Mixx By Yas, Moov \u2705 Guinea MTN \u2705 C\u00f4te d'Ivoire MTN, Moov, Wave, Orange \u2705 Niger Airtel \u2705 Senegal Wave, Orange, Free Senegal \u2705 Mali Orange \u2705 Burkina Faso Moov, Orange \u2705 All Regions - Visa/MasterCard"},{"location":"integrations/fedapay/#setup","title":"Setup","text":""},{"location":"integrations/fedapay/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from easyswitch import (\n    EasySwitch, \n    Provider,\n    TransactionDetail,\n    PaymentResponse,\n    TransactionStatus,\n    Currency,\n    TransactionType,\n    CustomerInfo\n)\n\n# Prepare FedaPay configuration\nconfig = {\n    \"debug\": True,\n    \"default_provider\": Provider.FEDAPAY,\n    \"providers\": {\n        Provider.FEDAPAY: {\n            \"api_secret\": \"your_fedapay_secret_key\",\n            \"callback_url\": \"your_fedapay_callback_url\",\n            \"timeout\": 60,  # timeout in seconds for HTTP requests\n            \"environment\": \"sandbox\",    # 'sandbox' or 'production'\n            \"extra\": {\n                \"webhook_secret\": \"your_fedapay_webhook_secret\",\n            }\n        },\n    }\n}\n\n# Initialize EasySwitch with FedaPay\nclient = EasySwitch.from_dict(config)\n</code></pre>"},{"location":"integrations/fedapay/#alternative-configuration-methods","title":"Alternative Configuration Methods","text":"<p>EasySwitch supports multiple configuration methods:</p> <pre><code># 1. From environment variables\nclient = EasySwitch.from_env()\n\n# 2. From JSON file\nclient = EasySwitch.from_json(\"config.json\")\n\n# 3. From YAML file\nclient = EasySwitch.from_yaml(\"config.yaml\")\n\n# 4. From multiple sources (with overrides)\nclient = EasySwitch.from_multi_sources(\n    env_file=\".env\",\n    json_file=\"overrides.json\"\n)\n</code></pre>"},{"location":"integrations/fedapay/#configuration","title":"Configuration","text":""},{"location":"integrations/fedapay/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file or set the following environment variables:</p> <pre><code># FedaPay Configuration\nEASYSWITCH_FEDAPAY_SECRET_KEY=sk_sandbox_your_api_secret_here\nEASYSWITCH_FEDAPAY_ENVIRONMENT=sandbox\nEASYSWITCH_FEDAPAY_WEBHOOK_SECRET=your_webhook_secret_here\nEASYSWITCH_FEDAPAY_CALLBACK_URL=https://your-domain.com/webhook/fedapay\n</code></pre>"},{"location":"integrations/fedapay/#authentication","title":"Authentication","text":"<p>FedaPay uses API key authentication. EasySwitch automaticaly set this for requests. </p> <pre><code>headers = {\n    'Authorization': f'Bearer {api_secret}',\n    'Content-Type': 'application/json'\n}\n</code></pre> <p>Security Note: Never expose your secret API key in client-side code. Always use environment variables or secure configuration management.</p>"},{"location":"integrations/fedapay/#easyswitch-methods","title":"EasySwitch Methods","text":"<p>EasySwitch provides a unified interface for all payment operations. Here are the main methods available:</p>"},{"location":"integrations/fedapay/#core-methods","title":"Core Methods","text":"Method Description Returns <code>send_payment(transaction)</code> Send a payment transaction <code>PaymentResponse</code> <code>check_status(transaction_id)</code> Check transaction status <code>TransactionStatus</code> <code>validate_webhook(payload, headers)</code> Validate webhook signature <code>bool</code> <code>parse_webhook(payload, headers)</code> Parse webhook into WebhookEvent <code>WebhookEvent</code> <p>Note: <code>cancel_transaction()</code> and <code>refund()</code> are not supported by FedaPay. See FedaPay Limitations for alternatives.</p>"},{"location":"integrations/fedapay/#configuration-methods","title":"Configuration Methods","text":"Method Description Returns <code>from_env(env_file)</code> Initialize from environment variables <code>EasySwitch</code> <code>from_json(json_file)</code> Initialize from JSON file <code>EasySwitch</code> <code>from_yaml(yaml_file)</code> Initialize from YAML file <code>EasySwitch</code> <code>from_dict(config_dict)</code> Initialize from Python dictionary <code>EasySwitch</code> <code>from_multi_sources(**sources)</code> Initialize from multiple sources <code>EasySwitch</code>"},{"location":"integrations/fedapay/#api-methods","title":"API Methods","text":""},{"location":"integrations/fedapay/#1-create-payment","title":"1. Create Payment","text":"<p>Initiate a payment transaction using EasySwitch's <code>TransactionDetail</code> class and <code>send_payment</code> method.</p> <pre><code># Create a TransactionDetail object\ntransaction = TransactionDetail(\n    transaction_id=\"TXN-123456\",  # Unique ID generated by your system\n    provider=Provider.FEDAPAY,\n    status=TransactionStatus.PENDING,\n    amount=1000.0,  # Amount in cents (10 XOF)\n    currency=Currency.XOF,\n    transaction_type=TransactionType.PAYMENT,\n    customer=CustomerInfo(\n        first_name=\"John\",\n        last_name=\"Doe\",\n        email=\"john.doe@email.com\", # FedaPay doesn't support many customer with same email\n        phone_number=\"+22990123456\"\n    ),\n    reason=\"Product XYZ Purchase\",\n    callback_url=\"https://your-site.com/webhook/fedapay\",\n    return_url=\"https://your-site.com/success\",\n    metadata={\n        \"order_id\": \"ORD-12345\"  # Optional business identifier\n    }\n)\n\n# Send payment using EasySwitch\nresponse = client.send_payment(transaction)\n\n# Check response properties\nprint(f\"Local Transaction ID: {transaction.transaction_id}\")  # Your internal ID\nprint(f\"FedaPay Transaction ID: {response.transaction_id}\")   # ID generated by FedaPay\nprint(f\"Payment URL: {response.payment_link}\")\nprint(f\"Status: {response.status}\")\nprint(f\"Is Successful: {response.is_successful}\")\nprint(f\"Is Pending: {response.is_pending}\")\n</code></pre> <p>Response Object (PaymentResponse): <pre><code>PaymentResponse(\n    transaction_id=\"txn_1234567890\",   # FedaPay transaction ID (not your local one)\n    provider=Provider.FEDAPAY,\n    status=TransactionStatus.PENDING,\n    amount=1000.0,\n    currency=Currency.XOF,\n    payment_link=\"https://checkout.fedapay.com/...\",\n    created_at=datetime(2024, 1, 15, 10, 30, 0),\n    customer=CustomerInfo(...),\n    raw_response={...}  # Raw FedaPay response\n)\n</code></pre></p> <p>\u26a0\ufe0f Important Notes</p> <ul> <li><code>transaction_id</code> in EasySwitch = your own internal identifier (must be unique in your system).  </li> <li><code>transaction_id</code> in the FedaPay response = the ID generated by FedaPay\u2019s platform.  </li> <li>You can use <code>metadata</code> to store business identifiers (<code>internal_transaction_id</code>, <code>order_id</code>, <code>invoice_id</code>, etc.), but be aware that metadata values may appear on customer-facing invoices generated by FedaPay.</li> </ul> <p>\ud83d\udd04 ID Mapping Overview</p> Context Field Name Who Generates It? Purpose EasySwitch (your system) <code>transaction_id</code> You Internal reference to track the transaction in your own DB. FedaPay <code>transaction_id</code> FedaPay Unique identifier in FedaPay\u2019s system (returned after init). Metadata e.g. <code>order_id</code> You Business-specific ID (e.g. Order/Invoice). Visible on customer invoices. <p>\u2705 Best Practice</p> <ul> <li>Always generate a unique <code>transaction_id</code> in your system.  </li> <li>Store both IDs (your own + FedaPay\u2019s) for reconciliation.  </li> <li>Use <code>metadata</code> for cross-referencing orders, but avoid sensitive info since it may be shown to the customer.  </li> </ul>"},{"location":"integrations/fedapay/#2-check-payment-status","title":"2. Check Payment Status","text":"<p>Retrieve the current status of a payment transaction using EasySwitch's <code>check_status</code> method.</p> <pre><code># Check transaction status\ntransaction_id = \"txn_1234567890\"\nresponse = client.check_status(transaction_id)\n\nstatus = response.status\nprint(f\"Status value: {status}\")\n\n# Check specific status types\nif status == TransactionStatus.SUCCESSFUL:\n    print(\"Payment completed successfully!\")\nelif status == TransactionStatus.PENDING:\n    print(\"Payment is still processing...\")\nelif status == TransactionStatus.FAILED:\n    print(\"Payment failed\")\n</code></pre> <p>Response Object (TransactionStatusResponse): <pre><code>TransactionStatusResponse(\n    transaction_id=\"txn_1234567890\",   # FedaPay transaction ID (not your local one)\n    provider=Provider.FEDAPAY,\n    status=TransactionStatus.PENDING,\n    amount=1000.0,\n    data={...}  # Raw FedaPay's transaction data\n)\n</code></pre></p> <p>Available TransactionStatus Values: <pre><code>class TransactionStatus(str, Enum):\n    PENDING = \"pending\"\n    SUCCESSFUL = \"successful\"\n    FAILED = \"failed\"\n    ERROR = \"error\"\n    CANCELLED = \"cancelled\"\n    REFUSED = \"refused\"\n    DECLINED = \"declined\"\n    EXPIRED = \"expired\"\n    REFUNDED = \"refunded\"\n    PROCESSING = \"processing\"\n    INITIATED = \"initiated\"\n    UNKNOWN = \"unknown\"\n    COMPLETED = \"completed\"\n    TRANSFERRED = \"transferred\"\n</code></pre></p>"},{"location":"integrations/fedapay/#3-fedapay-limitations","title":"3. FedaPay Limitations","text":"<p>Important: FedaPay does not support refunds or transaction cancellation through their API. These operations must be handled manually through the FedaPay dashboard or by contacting their support team.</p>"},{"location":"integrations/fedapay/#unsupported-operations","title":"Unsupported Operations","text":"Operation FedaPay Support Alternative Refunds \u274c Not supported Manual processing via dashboard Transaction Cancellation \u274c Not supported Contact FedaPay support Partial Refunds \u274c Not supported Manual processing via dashboard"},{"location":"integrations/fedapay/#workarounds","title":"Workarounds","text":"<p>For refunds and cancellations, you can:</p> <ol> <li>Use FedaPay Dashboard: Log into your FedaPay account and process refunds manually</li> <li>Contact Support: Reach out to FedaPay support for assistance</li> <li>Implement Business Logic: Track refunds in your own system and process them separately</li> </ol> <pre><code># Example: Track refunds in your system\ndef track_refund(transaction_id: str, amount: float, reason: str):\n    \"\"\"Track refund in your system (not processed through FedaPay)\"\"\"\n    refund_record = {\n        \"original_transaction_id\": transaction_id,\n        \"refund_amount\": amount,\n        \"reason\": reason,\n        \"status\": \"pending_manual_processing\",\n        \"created_at\": datetime.now(),\n        \"provider\": \"fedapay_manual\"\n    }\n    # Save to your database\n    # Notify customer\n    # Process through FedaPay dashboard\n    return refund_record\n</code></pre>"},{"location":"integrations/fedapay/#webhook-management","title":"Webhook Management","text":"<p>EasySwitch provides built-in webhook validation and parsing methods for FedaPay. This ensures secure and standardized webhook handling across all providers.</p>"},{"location":"integrations/fedapay/#easyswitch-webhook-methods","title":"EasySwitch Webhook Methods","text":"<p>EasySwitch offers two main webhook methods:</p> Method Description Returns <code>validate_webhook(payload, headers)</code> Validate webhook signature only <code>bool</code> <code>parse_webhook(payload, headers)</code> Parse webhook into WebhookEvent (calls validate_webhook internally) <code>WebhookEvent</code> <p>Important: <code>parse_webhook()</code> automatically calls <code>validate_webhook()</code> internally, so you don't need to validate separately when using <code>parse_webhook()</code>. Use <code>validate_webhook()</code> only when you need to check signature validity without parsing the webhook data.</p>"},{"location":"integrations/fedapay/#webhook-configuration-with-easyswitch","title":"Webhook Configuration with EasySwitch","text":"<p>Set up your webhook endpoint using EasySwitch's built-in methods:</p> <pre><code>from flask import Flask, request, jsonify\nfrom easyswitch import EasySwitch, Provider, WebhookEvent\nimport json\n\napp = Flask(__name__)\n\n# Initialize EasySwitch client\nclient = EasySwitch.from_env()  # or your preferred config method\n\n@app.route('/webhook/fedapay', methods=['POST'])\ndef handle_fedapay_webhook():\n    try:\n        # Get webhook data\n        payload = request.get_json()\n        headers = dict(request.headers)\n\n        # Parse webhook using EasySwitch (automatically validates signature)\n        webhook_event = client.parse_webhook(\n            payload=payload,\n            headers=headers,\n        )\n\n        # Process webhook event\n        process_webhook_event(webhook_event)\n\n        return jsonify({'status': 'success'})\n\n    except Exception as e:\n        print(f\"Webhook processing error: {e}\")\n        return jsonify({'error': 'Processing failed'}), 500\n\ndef process_webhook_event(webhook_event: WebhookEvent):\n    \"\"\"Process webhook event using EasySwitch WebhookEvent object\"\"\"\n\n    # Access standardized webhook data\n    event_type = webhook_event.event_type\n    transaction_id = webhook_event.transaction_id\n    status = webhook_event.status\n    amount = webhook_event.amount\n    currency = webhook_event.currency\n    created_at = webhook_event.created_at\n\n    print(f\"Webhook Event: {event_type}\")\n    print(f\"Transaction ID: {transaction_id}\")\n    print(f\"Status: {status}\")\n    print(f\"Amount: {amount} {currency}\")\n\n    # Handle different event types\n    if event_type == \"transaction.created\":\n        handle_transaction_created(webhook_event)\n    elif event_type == \"transaction.updated\":\n        handle_transaction_updated(webhook_event)\n    elif event_type == \"transaction.paid\":\n        handle_transaction_paid(webhook_event)\n    elif event_type == \"transaction.canceled\":\n        handle_transaction_canceled(webhook_event)\n    else:\n        print(f\"Unhandled event type: {event_type}\")\n\ndef handle_transaction_created(webhook_event: WebhookEvent):\n    \"\"\"Handle transaction created event\"\"\"\n    print(f\"New transaction created: {webhook_event.transaction_id}\")\n    # Update your database\n    # Send confirmation email\n    # Update order status\n\ndef handle_transaction_updated(webhook_event: WebhookEvent):\n    \"\"\"Handle transaction updated event\"\"\"\n    print(f\"Transaction updated: {webhook_event.transaction_id}\")\n    # Check status and update accordingly\n\ndef handle_transaction_paid(webhook_event: WebhookEvent):\n    \"\"\"Handle transaction paid event\"\"\"\n    print(f\"Transaction paid: {webhook_event.transaction_id}\")\n    # Process successful payment\n    # Update order status\n    # Send confirmation\n\ndef handle_transaction_canceled(webhook_event: WebhookEvent):\n    \"\"\"Handle transaction canceled event\"\"\"\n    print(f\"Transaction canceled: {webhook_event.transaction_id}\")\n    # Handle cancellation\n    # Update order status\n    # Notify customer\n</code></pre>"},{"location":"integrations/fedapay/#webhook-events","title":"Webhook Events","text":"<p>FedaPay sends the following webhook events that are automatically parsed by EasySwitch:</p> Event Type Description When It's Sent EasySwitch Status <code>transaction.created</code> Transaction created When payment is initiated <code>PENDING</code> <code>transaction.updated</code> Transaction updated When status changes Various <code>transaction.paid</code> Payment completed When customer completes payment <code>SUCCESSFUL</code> <code>transaction.canceled</code> Payment canceled When customer cancels payment <code>CANCELLED</code>"},{"location":"integrations/fedapay/#webhookevent-object","title":"WebhookEvent Object","text":"<p>EasySwitch's <code>WebhookEvent</code> provides standardized access to webhook data:</p> <pre><code>@dataclass\nclass WebhookEvent:\n    event_type: str              # e.g., \"transaction.paid\"\n    provider: str                # \"fedapay\"\n    transaction_id: str          # Transaction ID\n    status: TransactionStatus    # Normalized status\n    amount: float                # Transaction amount\n    currency: Currency           # Currency (XOF)\n    created_at: datetime         # Event timestamp\n    raw_data: Dict[str, Any]     # Original webhook payload\n    metadata: Dict[str, Any]     # Additional metadata\n</code></pre>"},{"location":"integrations/fedapay/#webhook-security","title":"Webhook Security","text":"<p>EasySwitch automatically handles webhook signature validation using FedaPay's signature format:</p> <ul> <li>Signature Header: <code>X-Fedapay-Signature</code></li> <li>Format: <code>t=&lt;timestamp&gt;,s=&lt;signature&gt;</code></li> <li>Algorithm: HMAC-SHA256</li> <li>Validation: Automatic via <code>client.parse_webhook()</code> (calls <code>validate_webhook()</code> internally)</li> </ul>"},{"location":"integrations/fedapay/#when-to-use-each-method","title":"When to Use Each Method","text":"<p>Use <code>parse_webhook()</code> when: - You want to process the webhook data - You need the parsed <code>WebhookEvent</code> object - You want automatic signature validation</p> <p>Use <code>validate_webhook()</code> when: - You only need to check signature validity - You want to validate before processing - You're implementing custom webhook handling logic</p>"},{"location":"integrations/fedapay/#advanced-webhook-management","title":"Advanced Webhook Management","text":"<p>EasySwitch also provides methods to manage webhooks through the FedaPay API:</p> <pre><code>import asyncio\n\n# Get all webhooks\nFedaPay = client._get_integrator(Provider.FEDAPAY)\nall_webhooks_response = asyncio.run(FedaPay.get_all_webhooks())\nprint(f\"Total Webhooks: {len(webhooks_response.webhooks)}\")\n\n# Get specific webhook details\nwebhook_detail = asyncio.run(FedaPay.get_webhook_detail(\"webhook_id\"))\nprint(f\"Webhook URL: {webhook_detail.url}\")\nprint(f\"Webhook enabled: {webhook_detail.enabled}\")\n</code></pre>"},{"location":"integrations/fedapay/#easyswitch-data-types","title":"EasySwitch Data Types","text":""},{"location":"integrations/fedapay/#transactiondetail-class","title":"TransactionDetail Class","text":"<p>The <code>TransactionDetail</code> class is the core data structure for all payment operations in EasySwitch:</p> <pre><code>@dataclass\nclass TransactionDetail:\n    transaction_id: str\n    provider: Provider\n    amount: float\n    currency: Currency\n    status: TransactionStatus = TransactionStatus.PENDING\n    transaction_type: TransactionType = TransactionType.PAYMENT\n    created_at: datetime = field(default_factory=datetime.now)\n    updated_at: Optional[datetime] = None\n    completed_at: Optional[datetime] = None\n    customer: Optional[CustomerInfo] = None\n    reference: Optional[str] = None\n    reason: Optional[str] = None\n    callback_url: Optional[str] = None\n    return_url: Optional[str] = None\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    raw_data: Dict[str, Any] = field(default_factory=dict)\n</code></pre>"},{"location":"integrations/fedapay/#paymentresponse-class","title":"PaymentResponse Class","text":"<p>The <code>PaymentResponse</code> class provides standardized response data with helpful properties:</p> <pre><code>@dataclass\nclass PaymentResponse:\n    transaction_id: str\n    provider: Provider\n    status: TransactionStatus\n    amount: float\n    currency: Currency\n    created_at: Optional[datetime] = None\n    expires_at: Optional[datetime] = None\n    reference: Optional[str] = None\n    payment_link: Optional[str] = None\n    transaction_token: Optional[str] = None\n    customer: Optional[CustomerInfo] = None\n    raw_response: Dict[str, Any] = field(default_factory=dict)\n    metadata: Dict[str, Any] = field(default_factory=dict)\n\n    @property\n    def is_successful(self) -&gt; bool:\n        \"\"\"Check if the transaction was successful.\"\"\"\n        return self.status == TransactionStatus.SUCCESSFUL\n\n    @property\n    def is_pending(self) -&gt; bool:\n        \"\"\"Check if the transaction is pending.\"\"\"\n        return self.status in [\n            TransactionStatus.PENDING,\n            TransactionStatus.PROCESSING,\n            TransactionStatus.INITIATED\n        ]\n\n    @property\n    def is_failed(self) -&gt; bool:\n        \"\"\"Check if the transaction failed.\"\"\"\n        return self.status in [\n            TransactionStatus.FAILED,\n            TransactionStatus.CANCELLED,\n            TransactionStatus.EXPIRED\n        ]\n</code></pre>"},{"location":"integrations/fedapay/#customerinfo-class","title":"CustomerInfo Class","text":"<p>The <code>CustomerInfo</code> class standardizes customer data across all providers:</p> <pre><code>@dataclass\nclass CustomerInfo:\n    first_name: str\n    last_name: str\n    email: str\n    phone_number: str\n    id: Optional[str] = None\n    metadata: Dict[str, Any] = field(default_factory=dict)\n</code></pre>"},{"location":"integrations/fedapay/#transaction-status-mapping","title":"Transaction Status Mapping","text":"<p>EasySwitch standardizes transaction statuses across all providers. Here's how FedaPay statuses map to EasySwitch:</p> FedaPay Status EasySwitch Status Description <code>pending</code> <code>PENDING</code> Transaction is being processed <code>approved</code> <code>SUCCESSFUL</code> Payment completed successfully <code>declined</code> <code>FAILED</code> Payment was declined <code>canceled</code> <code>CANCELLED</code> Payment was canceled by user <code>refunded</code> <code>REFUNDED</code> Payment was refunded"},{"location":"integrations/fedapay/#error-handling","title":"Error Handling","text":"<p>Proper error handling is crucial for a robust payment integration. EasySwitch provides specific exception types for common error scenarios, but note that this list is not exhaustive \u2014 additional exceptions may occur depending on your configuration, aggregator behavior, or network conditions.</p> <pre><code>from easyswitch.exceptions import (\n    PaymentError,\n    NetworkError,\n    AuthenticationError,\n    ValidationError,\n    ConfigurationError,\n    InvalidRequestError\n)\n\ndef process_payment_safely(transaction):\n    \"\"\"Process payment with comprehensive error handling\"\"\"\n    try:\n        result = client.send_payment(transaction)\n        return result\n\n    except ValidationError as e:\n        # Invalid payment data\n        return {\n            'success': False,\n            'error': 'Validation error',\n            'message': str(e)\n        }\n\n    except AuthenticationError:\n        # API key issues\n        return {\n            'success': False,\n            'error': 'Authentication failed',\n            'message': 'Please check your API configuration'\n        }\n\n    except ConfigurationError:\n        # Configuration issues\n        return {\n            'success': False,\n            'error': 'Configuration error',\n            'message': 'Please check your SDK configuration'\n        }\n\n    except NetworkError:\n        # Network connectivity issues\n        return {\n            'success': False,\n            'error': 'Network error',\n            'message': 'Please check your internet connection and try again'\n        }\n\n    except PaymentError as e:\n        # General payment error\n        return {\n            'success': False,\n            'error': 'Payment error',\n            'message': str(e)\n        }\n\n    except InvalidRequestError as e:\n        # Invalid request format\n        return {\n            'success': False,\n            'error': 'Invalid request',\n            'message': str(e)\n        }\n\n    except Exception as e:\n        # Unexpected error\n        return {\n            'success': False,\n            'error': 'Unexpected error',\n            'message': 'An unexpected error occurred. Please try again later.'\n        }\n</code></pre> <p>\ud83d\udd0e Note</p> <p>The exceptions above cover the most common scenarios. Depending on the aggregator and your implementation, additional exceptions may be raised. Always include a generic Exception handler to gracefully catch unforeseen errors. For production systems, consider logging all errors for easier debugging and monitoring.</p>"},{"location":"integrations/fedapay/#testing","title":"Testing","text":""},{"location":"integrations/fedapay/#test-environment-setup","title":"Test Environment Setup","text":"<p>FedaPay provides a sandbox environment for testing your integration. Use test API keys and test phone numbers to simulate different scenarios.</p> <pre><code># Test configuration\ntest_config = {\n    \"debug\": True,\n    \"providers\": {\n        Provider.FEDAPAY: {\n            \"api_secret\": \"sk_sandbox_your_test_key_here\",\n            \"environment\": \"sandbox\",\n            \"timeout\": 30\n        }\n    }\n}\n\ntest_client = EasySwitch.from_dict(test_config)\n</code></pre>"},{"location":"integrations/fedapay/#test-phone-numbers","title":"Test Phone Numbers","text":"<p>Use these test phone numbers to simulate different payment scenarios:</p> Operator Test Phone Number Expected Result MTN Benin +229 66000001 Success MTN Benin +229 66000000 Failure Moov Benin +229 64000001 Success Moov Benin +229 64000000 Failure"},{"location":"integrations/fedapay/#test-card-numbers","title":"Test Card Numbers","text":"<p>For card payment testing, use these test card numbers:</p> Card Type Number Expected Result Visa 4111111111111111 Success Visa 4242424242424241 Failure MasterCard 5555555555554444 Success Visa 4242424242424242 Failure <p>Test Card Details: - Expiry Date: Any future date (e.g., 12/25) - CVV: Any 3-digit number (e.g., 123) - Name: Any name</p> <p>Note: These test numbers are provided by FedaPay for sandbox testing only. Never use them in production.</p>"},{"location":"integrations/fedapay/#complete-integration-example","title":"Complete Integration Example","text":"<p>Here's a complete example showing how to integrate FedaPay with EasySwitch using proper data types and error handling:</p> <pre><code>from easyswitch import (\n    EasySwitch, Provider, TransactionDetail, \n    PaymentResponse, TransactionStatus, Currency, \n    TransactionType, CustomerInfo\n)\nfrom easyswitch.exceptions import (\n    PaymentError, NetworkError, AuthenticationError,\n    ValidationError, InsufficientFundsError\n)\nimport time\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass FedaPayIntegration:\n    def __init__(self, api_secret, environment=\"sandbox\"):\n        \"\"\"Initialize FedaPay integration with EasySwitch\"\"\"\n        self.config = {\n            \"debug\": True,\n            \"default_provider\": Provider.FEDAPAY,\n            \"providers\": {\n                Provider.FEDAPAY: {\n                    \"api_secret\": api_secret,\n                    \"environment\": environment,\n                    \"timeout\": 60,\n                    \"callback_url\": \"https://your-domain.com/webhook/fedapay\",\n                    \"return_url\": \"https://your-domain.com/success\"\n                }\n            }\n        }\n        self.client = EasySwitch.from_dict(self.config)\n\n    def create_payment(\n        self, \n        amount: float, \n        currency: Currency, \n        reason: str, \n        customer: CustomerInfo, \n        order_id=None\n    ):\n        \"\"\"Create a payment transaction using EasySwitch\"\"\"\n        try:\n            # Create TransactionDetail object\n            transaction = TransactionDetail(\n                transaction_id=\"TXN-123456\",  # Will be generated\n                provider=Provider.FEDAPAY,\n                status=TransactionStatus.PENDING,\n                amount=amount,\n                currency=currency,\n                transaction_type=TransactionType.PAYMENT,\n                customer=customer,\n                reason=reason,\n                metadata={\n                    \"order_id\": order_id  # Optional business identifier\n                }\n            )\n\n            # Send payment using EasySwitch\n            response = self.client.send_payment(transaction)\n\n            logger.info(f\"Payment created: {response.transaction_id}\")\n            return {\n                'success': True,\n                'transaction_id': response.transaction_id,\n                'payment_link': response.payment_link,\n                'status': response.status,\n                'response': response\n            }\n\n        except Exception as e:\n            logger.error(f\"Payment creation failed: {e}\")\n            return {\n                'success': False,\n                'error': str(e),\n                'error_type': type(e).__name__\n            }\n\n    def check_payment_status(self, transaction_id):\n        \"\"\"Check payment status using EasySwitch\"\"\"\n        try:\n            result = self.client.check_status(transaction_id)\n            logger.info(f\"Payment status: {result}\")\n            return {\n                'success': True,\n                'status': result,\n                'status_value': status.result\n            }\n        except Exception as e:\n            logger.error(f\"Status check failed: {e}\")\n            return {\n                'success': False,\n                'error': str(e),\n                'error_type': type(e).__name__\n            }\n\n    def handle_webhook(self, payload, headers):\n        \"\"\"Handle webhook using EasySwitch methods\"\"\"\n        try:\n            # Parse webhook (automatically validates signature internally)\n            webhook_event = self.client.parse_webhook(\n                payload=payload,\n                headers=headers\n            )\n\n            logger.info(f\"Webhook processed: {webhook_event.event_type}\")\n            return {\n                'success': True,\n                'webhook_event': webhook_event\n            }\n\n        except Exception as e:\n            logger.error(f\"Webhook handling failed: {e}\")\n            return {\n                'success': False,\n                'error': str(e),\n                'error_type': type(e).__name__\n            }\n\ndef main():\n    \"\"\"Main function demonstrating FedaPay integration with EasySwitch\"\"\"\n    # Initialize integration\n    integration = FedaPayIntegration(\n        api_secret=\"sk_sandbox_your_test_key_here\",\n        environment=\"sandbox\"\n    )\n\n    # Test customer data\n    customer = CustomerInfo(\n        first_name=\"John\",\n        last_name=\"Doe\",\n        email=\"john.doe@example.com\",\n        phone_number=\"+22990000001\"\n    )\n\n    # Create payment\n    print(\"Creating payment with EasySwitch...\")\n    payment_result = integration.create_payment(\n        amount=2500.0,\n        currency=Currency.XOF,\n        reason=\"Test Payment with EasySwitch\",\n        customer=customer,\n        order_id=\"ORDER-001\"\n    )\n\n    if payment_result['success']:\n        print(f\"\u2705 Payment created successfully!\")\n        print(f\"Transaction ID: {payment_result['transaction_id']}\")\n        print(f\"Payment Link: {payment_result['payment_link']}\")\n        print(f\"Status: {payment_result['status']}\")\n\n        # Check if response has helpful properties\n        if 'response' in payment_result:\n            response = payment_result['response']\n            print(f\"Is Successful: {response.is_successful}\")\n            print(f\"Is Pending: {response.is_pending}\")\n            print(f\"Is Failed: {response.is_failed}\")\n\n        # Wait and check status\n        print(\"\\nWaiting 5 seconds before checking status...\")\n        time.sleep(5)\n\n        status_result = integration.check_payment_status(payment_result['transaction_id'])\n        if status_result['success']:\n            print(f\"\u2705 Payment status: {status_result['status']}\")\n            print(f\"Status value: {status_result['status_value']}\")\n        else:\n            print(f\"\u274c Status check failed: {status_result['error']}\")\n    else:\n        print(f\"\u274c Payment creation failed: {payment_result['error']}\")\n        print(f\"Error type: {payment_result.get('error_type', 'Unknown')}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"integrations/fedapay/#testing-checklist","title":"Testing Checklist","text":"<p>Before going live, ensure you've tested:</p> <ul> <li>[ ] Payment creation with valid data</li> <li>[ ] Payment creation with invalid data</li> <li>[ ] Payment status checking</li> <li>[ ] Webhook validation and parsing</li> <li>[ ] Webhook handling (all event types)</li> <li>[ ] Error handling for all exception types</li> <li>[ ] Different phone number formats</li> <li>[ ] Network timeout scenarios</li> <li>[ ] Authentication with invalid keys</li> <li>[ ] Webhook signature validation</li> <li>[ ] WebhookEvent object parsing</li> </ul> <p>Note: Refund and cancellation testing should be done manually through the FedaPay dashboard as these operations are not supported via API.</p>"},{"location":"integrations/fedapay/#limits-considerations","title":"Limits &amp; Considerations","text":""},{"location":"integrations/fedapay/#transaction-limits","title":"Transaction Limits","text":"Country Operator Minimum Maximum Benin MTN 100 XOF 500,000 XOF Benin Moov 100 XOF 300,000 XOF C\u00f4te d'Ivoire Orange 100 XOF 1,000,000 XOF C\u00f4te d'Ivoire MTN 100 XOF 500,000 XOF Togo Moov 100 XOF 300,000 XOF Senegal Orange 100 XOF 500,000 XOF Mali Orange 100 XOF 500,000 XOF Burkina Faso Orange 100 XOF 500,000 XOF"},{"location":"integrations/fedapay/#transaction-fees","title":"Transaction Fees","text":"<p>Transaction fees vary by operator and amount:</p> <ul> <li>Mobile Money: Generally 1-3% of transaction amount</li> <li>Card Payments: 2.9% + fixed fee</li> <li>International Cards: Additional 1% surcharge</li> </ul> <p>Note: Fees are subject to change. Check the FedaPay pricing page for current rates.</p>"},{"location":"integrations/fedapay/#processing-times","title":"Processing Times","text":"Operation Processing Time Mobile Money Payments 5-30 seconds Card Payments 1-3 minutes Refunds 1-3 business days Settlements 2-7 business days (varies by country)"},{"location":"integrations/fedapay/#rate-limits","title":"Rate Limits","text":"<ul> <li>API Requests: 100 requests per minute per API key</li> <li>Webhook Retries: 3 retries with exponential backoff</li> <li>Concurrent Transactions: 10 per customer per minute</li> </ul>"},{"location":"integrations/fedapay/#support-resources","title":"Support &amp; Resources","text":""},{"location":"integrations/fedapay/#official-resources","title":"Official Resources","text":"<ul> <li>\ud83d\udcda Documentation: docs.fedapay.com</li> <li>\ud83c\udf9b\ufe0f Dashboard: dashboard.fedapay.com</li> <li>\ud83d\udcca Status Page: status.fedapay.com</li> <li>\ud83d\udcac Support: support@fedapay.com</li> </ul>"},{"location":"integrations/fedapay/#community-help","title":"Community &amp; Help","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Developer Forum: Connect with other developers</li> <li>API Reference: Complete API documentation</li> <li>SDK Downloads: Official libraries for multiple languages</li> </ul>"},{"location":"integrations/fedapay/#getting-help","title":"Getting Help","text":"<ol> <li>Check Documentation: Most questions are answered in the official docs</li> <li>Search Issues: Look for similar problems in GitHub issues</li> <li>Contact Support: Email support@fedapay.com for technical issues</li> <li>Community Forum: Ask questions in the developer community</li> </ol>"},{"location":"integrations/fedapay/#best-practices","title":"Best Practices","text":"<ul> <li>Always test in sandbox before going live</li> <li>Implement proper error handling and retry logic</li> <li>Use webhooks for real-time status updates</li> <li>Keep your API keys secure and rotate them regularly</li> <li>Monitor your integration with proper logging</li> <li>Test with different phone number formats and countries</li> </ul>"},{"location":"integrations/paygate/","title":"Under development","text":""},{"location":"integrations/paygate/#paygate-integration-with-easyswitch","title":"PayGate Integration with EasySwitch","text":""},{"location":"integrations/paygate/#overview","title":"Overview","text":"<p>As the leading integrator and pioneer of electronic payment solutions in Togo, PayGate Global enables e-merchants and Togolese organizations to accept mobile payments on both web and mobile platforms. Notably designed to reduce fraud and maximize revenue, PayGate offers a simple and secure solution for collecting online payments via mobile money.</p>"},{"location":"integrations/paygate/#prerequisites","title":"Prerequisites","text":"<p>By default, any newly created account on PayGate remains inactive until all required formalities are completed. To activate your account:</p> <ul> <li>EasySwitch library is installed. For setup instructions, see Installation.</li> <li>Go to your Profile page in the dashboard.</li> <li>Submit the necessary documents:</li> <li>Business registration certificate or tax ID</li> <li>ID Card</li> <li>Project description</li> <li>Contact details</li> <li>Callback URL (Add the callback_url in the dashboard and define it in your code)</li> </ul> <p>Once verified, your account will be activated and ready to use. After activation, your API key becomes available directly from your dashboard.</p>"},{"location":"integrations/paygate/#supported-countries","title":"Supported Countries","text":"<p>PayGate supports the following countries and payment methods:</p> Country Mobile Money Operators Card Payments Togo Mixx By Yas, Moov \u2705"},{"location":"integrations/paygate/#setup","title":"Setup","text":""},{"location":"integrations/paygate/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from easyswitch import (\n    EasySwitch, \n    TransactionDetail, \n    Provider,\n    TransactionStatus, \n    Currency, \n    TransactionType, \n    CustomerInfo\n)\n\n# Prepare PayGate configuration\nconfig = {\n    \"debug\": True,\n    \"default_provider\": Provider.PAYGATE,\n    \"providers\": {\n        \"PAYGATE\": {\n            \"api_key\": \"your_paygate_api_key\",\n            \"callback_url\": \"your_paygate_callback_url\",\n            \"timeout\": 60,  # timeout in seconds for HTTP requests\n            \"environment\": \"production\",    # Only Production mode for paygate\n        },\n    }\n}\n\n#Initialize paygate client\nclient = EasySwitch.from_dict(config_dict=config)\n</code></pre>"},{"location":"integrations/paygate/#alternative-configuration-methods","title":"Alternative Configuration Methods","text":"<p>EasySwitch supports multiple configuration methods:</p> <pre><code># 1. From environment variables\nclient = EasySwitch.from_env()\n\n# 2. From JSON file\nclient = EasySwitch.from_json(\"config.json\")\n\n# 3. From YAML file\nclient = EasySwitch.from_yaml(\"config.yaml\")\n\n# 4. From multiple sources (with overrides)\nclient = EasySwitch.from_multi_sources(\n    env_file=\".env\",\n    json_file=\"overrides.json\"\n)\n</code></pre>"},{"location":"integrations/paygate/#configuration","title":"Configuration","text":""},{"location":"integrations/paygate/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file or set the following environment variables:</p> <pre><code># PayGate Configuration\nPAYGATE_API_KEY=sk_production_your_api_key_here\nPAYGATE_ENVIRONMENT=production\nPAYGATE_CALLBACK_URL=your_paygate_callback_url\n</code></pre>"},{"location":"integrations/paygate/#authentication","title":"Authentication","text":"<p>PayGate uses API key authentication. EasySwitch automaticaly set this for requests. </p> <pre><code>headers = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n</code></pre> <p>Security Note: Never expose your secret API key in client-side code. Always use environment variables or secure configuration management.</p>"},{"location":"integrations/paygate/#easyswitch-methods","title":"EasySwitch Methods","text":"<p>EasySwitch provides a unified interface for all payment operations. Here are the main methods available:</p>"},{"location":"integrations/paygate/#core-methods","title":"Core Methods","text":"Method Description Returns <code>send_payment(transaction)</code> Send a payment transaction <code>PaymentResponse</code> <code>check_status(transaction_id, provider)</code> Check transaction status <code>TransactionStatus</code>"},{"location":"integrations/paygate/#configuration-methods","title":"Configuration Methods","text":"Method Description Returns <code>from_env(env_file)</code> Initialize from environment variables <code>EasySwitch</code> <code>from_json(json_file)</code> Initialize from JSON file <code>EasySwitch</code> <code>from_yaml(yaml_file)</code> Initialize from YAML file <code>EasySwitch</code> <code>from_dict(config_dict)</code> Initialize from Python dictionary <code>EasySwitch</code> <code>from_multi_sources(**sources)</code> Initialize from multiple sources <code>EasySwitch</code>"},{"location":"integrations/paygate/#api-methods","title":"API Methods","text":""},{"location":"integrations/paygate/#1-create-payment","title":"1. Create Payment","text":"<p>Initiate a payment transaction using EasySwitch's <code>TransactionDetail</code> class and <code>send_payment</code> method.</p> <pre><code># Create a TransactionDetail object\ntransaction = TransactionDetail(\n    transaction_id=\"transaction1234\",  # Unique ID generated by your system\n    provider=Provider.PAYGATE,\n    status = TransactionStatus.PENDING,\n    amount = 100,\n    currency=Currency.XOF,\n    transaction_type=TransactionType.PAYMENT,\n    customer=CustomerInfo(\n        firstname=\"John\",\n        lastname=\"Doe\",\n        email=\"john.doe@email.com\",\n        phone_number=\"+22990123456\"\n    ),\n    reason=\"Product XYZ Purchase\"\n)\n\n# Send payment using EasySwitch\nresponse = client.send_payment(transaction)\n\n# Check response properties\nprint(f\"Local Transaction ID: {transaction.transaction_id}\")  # Your internal ID\nprint(f\"FedaPay Transaction ID: {response.transaction_id}\")   # ID generated by FedaPay\nprint(f\"Payment URL: {response.payment_link}\")\nprint(f\"Status: {response.status}\")\nprint(f\"Is Successful: {response.is_successful}\")\nprint(f\"Is Pending: {response.is_pending}\")\n</code></pre> <p>Response Object (PaymentResponse): <pre><code>PaymentResponse(\n  transaction_id='transaction1234', \n  provider='PAYGATE', \n  status=&lt;TransactionStatus.PENDING: 'pending'&gt;, \n  amount=100, currency=&lt;Currency.XOF: 'XOF'&gt;, \n  created_at=datetime.datetime(2025, 5, 15, 22, 16, 12, 279729), \n  expires_at=None, reference='transaction1234', \n  payment_link='payment_link', \n  transaction_token=None, \n  customer=CustomerInfo(phone_number='+22990123456', first_name='John', last_name='Doe', email='john.doe@email.com', address=None, city=None, country=None, postal_code=None, zip_code=None, state=None, id=None), \n  raw_response={'payment_url': 'payment_link'}, metadata={})\n</code></pre></p> <p>\u26a0\ufe0f Important Notes</p> <ul> <li><code>transaction_id</code> in EasySwitch = your own internal identifier (must be unique in your system).  </li> <li><code>transaction_id</code> in the PayGate response = the ID generated by PayGate's platform.</li> </ul> <p>\ud83d\udd04 ID Mapping Overview</p> Context Field Name Who Generates It? Purpose EasySwitch (your system) <code>transaction_id</code> You Internal reference to track the transaction in your own DB. FedaPay <code>transaction_id</code> FedaPay Unique identifier in FedaPay\u2019s system (returned after init). <p>\u2705 Best Practice</p> <ul> <li>Always generate a unique <code>transaction_id</code> in your system.  </li> <li>Store both IDs (your own + PayGate's) for reconciliation.</li> </ul>"},{"location":"integrations/paygate/#2-check-payment-status","title":"2. Check Payment Status","text":"<p>Retrieve the current status of a payment transaction using EasySwitch's <code>check_status</code> method.</p> <pre><code># Check transaction status\ntransaction_id = \"transaction1234\"\nresponse = client.check_status(transaction_id)\n\nstatus = response.status\nprint(f\"Status value: {status}\")\n\n# Check specific status types\nif status == TransactionStatus.SUCCESSFUL:\n    print(\"Payment completed successfully!\")\nelif status == TransactionStatus.PENDING:\n    print(\"Payment is still processing...\")\nelif status == TransactionStatus.FAILED:\n    print(\"Payment failed\")\n</code></pre> <p>Response Object (TransactionStatusResponse): <pre><code>TransactionStatusResponse(\n    transaction_id=\"transaction1234\",   # PayGate transaction ID (not your local one)\n    provider=Provider.PAYGATE,\n    status=TransactionStatus.PENDING,\n    amount=1000.0,\n    data={...}  # Raw PayGate's transaction data\n)\n</code></pre></p> <p>Available TransactionStatus Values: <pre><code>class TransactionStatus(str, Enum):\n    PENDING = \"pending\"\n    SUCCESSFUL = \"successful\"\n    FAILED = \"failed\"\n    ERROR = \"error\"\n    CANCELLED = \"cancelled\"\n    REFUSED = \"refused\"\n    EXPIRED = \"expired\"\n    PROCESSING = \"processing\"\n    INITIATED = \"initiated\"\n    COMPLETED = \"completed\"\n</code></pre></p>"},{"location":"integrations/paygate/#3-paygate-limitations","title":"3. PayGate Limitations","text":"<p>Important: PayGate does not support refunds or transaction cancellation through their API. These operations must be handled manually through the PayGate dashboard or by contacting their support team.</p>"},{"location":"integrations/paygate/#unsupported-operations","title":"Unsupported Operations","text":"Operation PayGate Support Alternative Refunds \u274c Not supported Manual processing via dashboard Transaction Cancellation \u274c Not supported Contact PayGate support Partial Refunds \u274c Not supported Manual processing via dashboard"},{"location":"integrations/semoa/","title":"Under development","text":""}]}